  [1m[35m (103.0ms)[0m  [1m[35mCREATE DATABASE "server_development" ENCODING = 'unicode' /*application='Server'*/[0m
  [1m[35m (1.7ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY) /*application='Server'*/[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL) /*application='Server'*/[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1 /*application='Server'*/[0m
  [1m[36mActiveRecord::InternalMetadata Create (0.4ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('environment', 'development', '2025-08-11 16:33:05.022421', '2025-08-11 16:33:05.022446') RETURNING "key" /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC /*application='Server'*/[0m
Migrating to CreateBudgets (20250811163108)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[35mBEGIN immediate TRANSACTION /*application='Server'*/[0m
  [1m[35m (1.5ms)[0m  [1m[35mCREATE TABLE "budgets" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL) /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811163108') RETURNING "version" /*application='Server'*/[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[35mCOMMIT TRANSACTION /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC /*application='Server'*/[0m
  [1m[35m (102.4ms)[0m  [1m[35mCREATE DATABASE "server_development" ENCODING = 'unicode' /*application='Server'*/[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = 'environment' ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1 /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC /*application='Server'*/[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC /*application='Server'*/[0m
Started POST "/graphql" for ::1 at 2025-08-11 10:02:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 26ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:03:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"This is a budget for all of my software development tools I need for the month"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"This is a budget for all of my software development tools I need for the month"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 204 No Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:05:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"{ budgets { id name amount } }", "graphql"=>{"query"=>"{ budgets { id name amount } }"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/graphiql" for ::1 at 2025-08-11 10:05:23 -0700
Processing by GraphiQL::Rails::EditorsController#show as */*
  Parameters: {"graphql_path"=>"/graphql"}
  Rendering /Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphiql-rails-1.10.5/app/views/graphiql/rails/editors/show.html.erb
  Rendered /Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphiql-rails-1.10.5/app/views/graphiql/rails/editors/show.html.erb (Duration: 4.3ms | GC: 0.0ms)
Completed 200 OK in 35ms (Views: 13.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:06:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) { createBudget(input: { name: $name, amount: $amount, description: $description }) { budget { id name amount description createdAt updatedAt } errors } }", "variables"=>{"name"=>"Test Budget", "amount"=>100.0, "description"=>"Test description"}, "graphql"=>{"query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) { createBudget(input: { name: $name, amount: $amount, description: $description }) { budget { id name amount description createdAt updatedAt } errors } }", "variables"=>{"name"=>"Test Budget", "amount"=>100.0, "description"=>"Test description"}}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:06:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:07:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"A budget for all the different tools I need for my software development"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"A budget for all the different tools I need for my software development"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:07:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:07:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:13:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:13:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:14:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:14:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"All the different tools I need"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"All the different tools I need"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:14:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:14:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:15:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:15:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"Tools and stuff"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"Tools and stuff"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:15:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:17:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"query"=>"{ budgets { id name amount } }", "graphql"=>{"query"=>"{ budgets { id name amount } }"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:17:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"stuff and things"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"stuff and things"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:17:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:20:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:20:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"please work"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"please work"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:21:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:23:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:25:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:25:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:27:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 10:27:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"All the tools I need to get started"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>100, "description"=>"All the tools I need to get started"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 11:31:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 9ms (Views: 0.8ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 11:31:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"Tools. All the tools"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"Tools. All the tools"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 11:51:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:39:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mBudget Load (15.5ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started POST "/graphql" for ::1 at 2025-08-11 12:45:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:46:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:46:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:46:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-11 12:50:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (2.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 608ms (Views: 0.2ms | ActiveRecord: 3.6ms (1 query, 0 cached) | GC: 18.9ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:52:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"To cover my Cursor and chatgpt bills"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"To cover my Cursor and chatgpt bills"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (1.1ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Software Development"], ["amount", 30.0], ["description", "To cover my Cursor and chatgpt bills"], ["created_at", "2025-08-11 19:52:47.518024"], ["updated_at", "2025-08-11 19:52:47.518024"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 25ms (Views: 0.1ms | ActiveRecord: 2.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 12:52:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


  [1m[36mBudget Load (0.9ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started POST "/graphql" for ::1 at 2025-08-11 12:54:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>200, "description"=>"This is a weekly budget"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>200, "description"=>"This is a weekly budget"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.6ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Groceries"], ["amount", 200.0], ["description", "This is a weekly budget"], ["created_at", "2025-08-11 19:54:03.331597"], ["updated_at", "2025-08-11 19:54:03.331597"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.9ms (1 query, 0 cached) | GC: 0.0ms)


  [1m[36mBudget Load (1.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateTransactions (20250811201517)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.8ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" date, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811201517') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-11 13:18:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 43ms (Views: 0.2ms | ActiveRecord: 1.0ms (1 query, 0 cached) | GC: 11.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:18:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 45ms (Views: 0.1ms | ActiveRecord: 0.8ms (2 queries, 0 cached) | GC: 2.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:19:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: Date) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: Date) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to ChangeDateToDatetimeInTransactions (20250811202250)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" date, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811202250') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-11 13:26:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 13ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:26:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.4ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 20ms (Views: 0.2ms | ActiveRecord: 1.4ms (1 query, 0 cached) | GC: 1.1ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:26:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:27:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-12"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-12"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.4ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 14ms (Views: 0.3ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: ISO8601DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"budgetId"=>"1", "description"=>"Monthly ChatGPT", "amount"=>10, "date"=>"2025-08-07"}, "query"=>"mutation CreateTransaction($budgetId: ID!, $description: String!, $amount: Float!, $date: ISO8601DateTime) {\n  createTransaction(\n    input: {budgetId: $budgetId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("budget_id", "description", "amount", "date", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 1], ["description", "Monthly ChatGPT"], ["amount", 10.0], ["date", "2025-08-07"], ["created_at", "2025-08-11 20:28:36.203533"], ["updated_at", "2025-08-11 20:28:36.203533"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 26ms (Views: 0.1ms | ActiveRecord: 1.0ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:28:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 13:39:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (2.6ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:20:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 1.2ms (2 queries, 0 cached) | GC: 5.4ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:22:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 2]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:24:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 2]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 2.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:24:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.7ms)


  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateBudgetCategories (20250811223716)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.4ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_a928ada795"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811223716') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at")
                     SELECT "id","description","amount","date","created_at","updated_at" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at")
                     SELECT "id","description","amount","date","created_at","updated_at" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL)[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at")
                     SELECT "id","description","amount","date","created_at","updated_at" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (1.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_category_id" integer[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_category_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_category_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.4ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","budget_id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","budget_id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811223957') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Migrating to MakeBudgetCategoryIdNotNullable (20250811224836)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to MigrateExistingDataToBudgetCategories (20250811224000)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" ORDER BY "budgets"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mBudgetCategory Create (0.2ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 1], ["name", "Software Development"], ["amount", 30.0], ["description", "To cover my Cursor and chatgpt bills"], ["created_at", "2025-08-11 19:52:47.518024"], ["updated_at", "2025-08-11 19:52:47.518024"]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to MigrateExistingDataToBudgetCategories (20250811224000)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" ORDER BY "budgets"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mBudgetCategory Create (0.3ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 1], ["name", "Software Development"], ["amount", 30.0], ["description", "To cover my Cursor and chatgpt bills"], ["created_at", "2025-08-11 19:52:47.518024"], ["updated_at", "2025-08-11 19:52:47.518024"]]
  [1m[36mTransaction Update All (0.3ms)[0m  [1m[33mUPDATE "transactions" SET "budget_category_id" = ? WHERE "transactions"."budget_id" = ?[0m  [["budget_category_id", 1], ["budget_id", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to MigrateExistingDataToBudgetCategories (20250811224000)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" ORDER BY "budgets"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mBudgetCategory Create (0.2ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 1], ["name", "Software Development"], ["amount", 30.0], ["description", "To cover my Cursor and chatgpt bills"], ["created_at", "2025-08-11 19:52:47.518024"], ["updated_at", "2025-08-11 19:52:47.518024"]]
  [1m[36mBudgetCategory Create (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 2], ["name", "Groceries"], ["amount", 200.0], ["description", "This is a weekly budget"], ["created_at", "2025-08-11 19:54:03.331597"], ["updated_at", "2025-08-11 19:54:03.331597"]]
  [1m[36mActiveRecord::SchemaMigration Create (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811224000') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Migrating to MakeBudgetCategoryIdNotNullable (20250811224836)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.8ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "budget_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "budget_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "budget_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id","budget_id" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_category_id","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.1ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250811223957'[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to UpdateTransactionsToReferenceBudgetCategories (20250811223957)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_category_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811223957') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Migrating to MigrateExistingDataToBudgetCategories (20250811223958)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" ORDER BY "budgets"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mBudgetCategory Create (0.2ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 1], ["name", "Software Development"], ["amount", 30.0], ["description", "To cover my Cursor and chatgpt bills"], ["created_at", "2025-08-11 19:52:47.518024"], ["updated_at", "2025-08-11 19:52:47.518024"]]
  [1m[36mTransaction Update All (0.3ms)[0m  [1m[33mUPDATE "transactions" SET "budget_category_id" = ? WHERE "transactions"."budget_id" = ?[0m  [["budget_category_id", 3], ["budget_id", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[35m (2.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "budget_categories"[0m
  [1m[35m (0.7ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "budgets"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budgets" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.3ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_a928ada795"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY)[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES (20250811224000)[0m
  [1m[35m (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES
(20250811223716),
(20250811202250),
(20250811201517),
(20250811163108);[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.2ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('environment', 'development', '2025-08-11 22:54:26.266972', '2025-08-11 22:54:26.266974') RETURNING "key"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "schema_sha1"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.1ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('schema_sha1', '662e5dc6543c08b024ed2e5196e1e904f726b942', '2025-08-11 22:54:26.268730', '2025-08-11 22:54:26.268732') RETURNING "key"[0m
  [1m[35m (0.8ms)[0m  [1m[35mDROP TABLE IF EXISTS "budget_categories"[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35m (0.0ms)[0m  [1m[35mDROP TABLE IF EXISTS "budgets"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budgets" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.0ms)[0m  [1m[35mDROP TABLE IF EXISTS "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_a928ada795"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY)[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES (20250811224000)[0m
  [1m[35m (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES
(20250811223716),
(20250811202250),
(20250811201517),
(20250811163108);[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.1ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('environment', 'development', '2025-08-11 22:54:26.294914', '2025-08-11 22:54:26.294916') RETURNING "key"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Update (0.1ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2025-08-11 22:54:26.295694' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "schema_sha1"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.1ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('schema_sha1', '662e5dc6543c08b024ed2e5196e1e904f726b942', '2025-08-11 22:54:26.296280', '2025-08-11 22:54:26.296282') RETURNING "key"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddBudgetCategoryToTransactions (20250811225434)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.4ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811225434') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-11 15:55:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 16ms (Views: 0.6ms | ActiveRecord: 1.2ms (1 query, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:55:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"So many tools"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "amount"=>30, "description"=>"So many tools"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.4ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Software Development"], ["amount", 30.0], ["description", "So many tools"], ["created_at", "2025-08-11 22:55:28.825985"], ["updated_at", "2025-08-11 22:55:28.825985"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.9ms (1 query, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:55:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
              Failed to implement Budget.transactions, tried:

              - `Types::BudgetType#transactions`, which did not exist
              - `Budget#transactions`, which did not exist
              - Looking up hash key `:transactions` or `"transactions"` on `#<Budget:0x00000001121f6540>`, but it wasn't a Hash

              To implement this field, define one of the methods above (and check for typos), or supply a `fallback_value`.

/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:785:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:903:in `block in with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:939:in `block (2 levels) in run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:942:in `run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:939:in `block in run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field_extension.rb:134:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:926:in `run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:898:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:359:in `evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:315:in `block (3 levels) in evaluate_selections'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 5ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:56:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 22ms (Views: 0.1ms | ActiveRecord: 1.9ms (2 queries, 0 cached) | GC: 0.1ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:56:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 31ms (Views: 0.1ms | ActiveRecord: 1.8ms (2 queries, 0 cached) | GC: 3.1ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:56:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.1ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:56:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:58:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>800, "description"=>"Monthly amount for groceries"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>800, "description"=>"Monthly amount for groceries"}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.4ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Groceries"], ["amount", 800.0], ["description", "Monthly amount for groceries"], ["created_at", "2025-08-11 22:58:25.625301"], ["updated_at", "2025-08-11 22:58:25.625301"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.9ms (1 query, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 15:58:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:01:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>500, "description"=>"Monthly amount for food."}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Groceries", "amount"=>500, "description"=>"Monthly amount for food."}, "query"=>"mutation CreateBudget($name: String!, $amount: Float!, $description: String) {\n  createBudget(input: {name: $name, amount: $amount, description: $description}) {\n    budget {\n      id\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.7ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Groceries"], ["amount", 500.0], ["description", "Monthly amount for food."], ["created_at", "2025-08-11 23:01:40.547846"], ["updated_at", "2025-08-11 23:01:40.547846"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 1.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:03:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
Completed 200 OK in 27ms (Views: 0.2ms | ActiveRecord: 2.0ms (4 queries, 0 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:06:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.6ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
Completed 200 OK in 59ms (Views: 0.2ms | ActiveRecord: 3.5ms (4 queries, 0 cached) | GC: 8.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:10:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
Completed 200 OK in 33ms (Views: 0.1ms | ActiveRecord: 2.0ms (4 queries, 0 cached) | GC: 1.5ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:10:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "description"=>"Everything related to my job (tools, books, software, etc.)"}, "query"=>"mutation CreateBudget($name: String!, $description: String) {\n  createBudget(input: {name: $name, description: $description}) {\n    budget {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"Software Development", "description"=>"Everything related to my job (tools, books, software, etc.)"}, "query"=>"mutation CreateBudget($name: String!, $description: String) {\n  createBudget(input: {name: $name, description: $description}) {\n    budget {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.5ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Software Development"], ["amount", nil], ["description", "Everything related to my job (tools, books, software, etc.)"], ["created_at", "2025-08-11 23:10:50.260692"], ["updated_at", "2025-08-11 23:10:50.260692"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 1.0ms (1 query, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:10:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.3ms (5 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:11:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:13:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (2.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (1.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Sum (0.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Sum (0.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
Completed 200 OK in 32ms (Views: 0.2ms | ActiveRecord: 4.3ms (9 queries, 0 cached) | GC: 4.9ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:14:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Association named 'transactions' was not found on Budget; perhaps you misspelled it?
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:56:in `association'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:85:in `block in grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:120:in `loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:77:in `runnable_loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `flat_map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader.rb:121:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1326:in `block in preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1414:in `block in exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1470:in `skip_query_cache_if_necessary'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1404:in `exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1181:in `load'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:343:in `records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:586:in `find_take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:129:in `take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:534:in `find_one'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:513:in `find_with_ids'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:100:in `find'
/Users/nate/budget-tracker/server/app/graphql/types/query_type.rb:36:in `budget'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 19ms (Views: 0.2ms | ActiveRecord: 1.5ms (1 query, 0 cached) | GC: 1.1ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:16:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.4ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Sum (0.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Sum (0.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Sum (0.0ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
Completed 200 OK in 23ms (Views: 0.1ms | ActiveRecord: 1.1ms (9 queries, 0 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:16:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Association named 'transactions' was not found on Budget; perhaps you misspelled it?
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:56:in `association'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:85:in `block in grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:120:in `loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:77:in `runnable_loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `flat_map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader.rb:121:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1326:in `block in preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1414:in `block in exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1470:in `skip_query_cache_if_necessary'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1404:in `exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1181:in `load'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:343:in `records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:586:in `find_take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:129:in `take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:534:in `find_one'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:513:in `find_with_ids'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:100:in `find'
/Users/nate/budget-tracker/server/app/graphql/types/query_type.rb:36:in `budget'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 3ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:16:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"2"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"2"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Association named 'transactions' was not found on Budget; perhaps you misspelled it?
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:56:in `association'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:85:in `block in grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:83:in `grouped_records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:120:in `loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/branch.rb:77:in `runnable_loaders'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `flat_map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader/batch.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/preloader.rb:121:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1326:in `block in preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1325:in `preload_associations'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1414:in `block in exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1470:in `skip_query_cache_if_necessary'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1404:in `exec_queries'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1181:in `load'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:343:in `records'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:586:in `find_take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:129:in `take'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:534:in `find_one'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:513:in `find_with_ids'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/finder_methods.rb:100:in `find'
/Users/nate/budget-tracker/server/app/graphql/types/query_type.rb:36:in `budget'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:18:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.6ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 2]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 3]]
  [1m[36mBudgetCategory Sum (0.5ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 4]]
Completed 200 OK in 60ms (Views: 0.4ms | ActiveRecord: 4.4ms (9 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:18:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"1"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 1]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


  [1m[36mBudget Delete All (1.8ms)[0m  [1m[31mDELETE FROM "budgets"[0m
Started POST "/graphql" for ::1 at 2025-08-11 16:19:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:21:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudget", "variables"=>{"name"=>"House", "description"=>"Everything related to the house (groceries, insurance, mortgage, etc.)"}, "query"=>"mutation CreateBudget($name: String!, $description: String) {\n  createBudget(input: {name: $name, description: $description}) {\n    budget {\n      id\n      name\n      description\n      totalAmount\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudget", "variables"=>{"name"=>"House", "description"=>"Everything related to the house (groceries, insurance, mortgage, etc.)"}, "query"=>"mutation CreateBudget($name: String!, $description: String) {\n  createBudget(input: {name: $name, description: $description}) {\n    budget {\n      id\n      name\n      description\n      totalAmount\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudget Create (0.5ms)[0m  [1m[32mINSERT INTO "budgets" ("name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "House"], ["amount", nil], ["description", "Everything related to the house (groceries, insurance, mortgage, etc.)"], ["created_at", "2025-08-11 23:21:41.902712"], ["updated_at", "2025-08-11 23:21:41.902712"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.8ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:21:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:21:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RemoveAmountFromBudgets (20250811232433)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudgets" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35mSQL (0.6ms)[0m  [1m[32mINSERT INTO "abudgets" ("id","name","amount","description","created_at","updated_at")
                     SELECT "id","name","amount","description","created_at","updated_at" FROM "budgets"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budgets"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budgets" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budgets" ("id","name","description","created_at","updated_at")
                     SELECT "id","name","description","created_at","updated_at" FROM "abudgets"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudgets"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250811232433') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-11 16:32:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Groceries", "amount"=>800, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Groceries", "amount"=>800, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.4ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 5], ["name", "Groceries"], ["amount", 800.0], ["description", nil], ["created_at", "2025-08-11 23:32:29.561106"], ["updated_at", "2025-08-11 23:32:29.561106"]]
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 26ms (Views: 0.1ms | ActiveRecord: 2.6ms (2 queries, 0 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:32:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.7ms (4 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:32:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Mortgage", "amount"=>3800, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Mortgage", "amount"=>3800, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.4ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 5], ["name", "Mortgage"], ["amount", 3800.0], ["description", nil], ["created_at", "2025-08-11 23:32:50.838594"], ["updated_at", "2025-08-11 23:32:50.838594"]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.8ms (2 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:32:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:33:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Gas", "amount"=>100, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"budgetId"=>"5", "name"=>"Gas", "amount"=>100, "description"=>nil}, "query"=>"mutation CreateBudgetCategory($budgetId: ID!, $name: String!, $amount: Float!, $description: String) {\n  createBudgetCategory(\n    input: {budgetId: $budgetId, name: $name, amount: $amount, description: $description}\n  ) {\n    budgetCategory {\n      id\n      budgetId\n      name\n      amount\n      description\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.3ms)[0m  [1m[32mINSERT INTO "budget_categories" ("budget_id", "name", "amount", "description", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["budget_id", 5], ["name", "Gas"], ["amount", 100.0], ["description", nil], ["created_at", "2025-08-11 23:33:09.826453"], ["updated_at", "2025-08-11 23:33:09.826453"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.6ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:33:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:37:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"1"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"1"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
Completed 200 OK in 26ms (Views: 0.2ms | ActiveRecord: 2.0ms (2 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:38:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"budgetCategoryId"=>"1", "description"=>"Weekly Groceries", "amount"=>162, "date"=>"2025-08-04"}, "query"=>"mutation CreateTransaction($budgetCategoryId: ID!, $description: String!, $amount: Float!, $date: ISO8601DateTime) {\n  createTransaction(\n    input: {budgetCategoryId: $budgetCategoryId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"budgetCategoryId"=>"1", "description"=>"Weekly Groceries", "amount"=>162, "date"=>"2025-08-04"}, "query"=>"mutation CreateTransaction($budgetCategoryId: ID!, $description: String!, $amount: Float!, $date: ISO8601DateTime) {\n  createTransaction(\n    input: {budgetCategoryId: $budgetCategoryId, description: $description, amount: $amount, date: $date}\n  ) {\n    transaction {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.6ms)[0m  [1m[32mINSERT INTO "transactions" ("description", "amount", "date", "created_at", "updated_at", "budget_id", "budget_category_id") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["description", "Weekly Groceries"], ["amount", 162.0], ["date", "2025-08-04 07:00:00"], ["created_at", "2025-08-11 23:38:22.009410"], ["updated_at", "2025-08-11 23:38:22.009410"], ["budget_id", nil], ["budget_category_id", 1]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 1.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:38:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"1"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"1"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:38:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:39:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 29ms (Views: 0.1ms | ActiveRecord: 1.2ms (6 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:44:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 34ms (Views: 0.1ms | ActiveRecord: 2.5ms (6 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:44:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:44:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 0.8ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:44:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.3ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.9ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-11 16:45:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (6 queries, 0 cached) | GC: 0.0ms)


Started GET "/" for ::1 at 2025-08-11 16:56:18 -0700
Processing by Rails::WelcomeController#index as HTML
  Rendering /Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/templates/rails/welcome/index.html.erb
  Rendered /Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/templates/rails/welcome/index.html.erb (Duration: 1.1ms | GC: 0.0ms)
Completed 200 OK in 25ms (Views: 7.6ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.7ms)


Started GET "/icon.png" for ::1 at 2025-08-11 16:56:18 -0700
  
ActionController::RoutingError (No route matches [GET] "/icon.png"):
  
Started POST "/graphql" for ::1 at 2025-08-11 18:07:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (5.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.6ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 22ms (Views: 0.1ms | ActiveRecord: 6.3ms (6 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 07:50:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.9ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.5ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in -38ms (Views: 0.3ms | ActiveRecord: 2.7ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:15:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 1.8ms (6 queries, 0 cached) | GC: 0.0ms)


  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddCategoryTypeToBudgetCategories (20250812162748)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "budget_categories" ADD "category_type" varchar DEFAULT 'budget' NOT NULL[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812162748') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 09:28:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
wrong number of arguments (given 0, expected 1..2)
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/enum.rb:216:in `enum'
/Users/nate/budget-tracker/server/app/models/budget_category.rb:5:in `<class:BudgetCategory>'
/Users/nate/budget-tracker/server/app/models/budget_category.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:290:in `const_get'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:290:in `constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:316:in `safe_constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/core_ext/string/inflections.rb:87:in `safe_constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:259:in `block in compute_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:258:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:258:in `compute_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:496:in `compute_class'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:431:in `_klass'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:423:in `klass'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:763:in `automatic_inverse_of'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `block in inverse_name'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `fetch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `inverse_name'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:675:in `has_inverse?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:265:in `check_validity_of_inverse!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:619:in `check_validity!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association.rb:42:in `initialize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:58:in `new'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:58:in `association'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/builder/association.rb:105:in `budget_categories'
/Users/nate/budget-tracker/server/app/graphql/types/budget_type.rb:12:in `total_amount'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:359:in `evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:315:in `block (3 levels) in evaluate_selections'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 32ms (Views: 0.2ms | ActiveRecord: 1.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:30:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
wrong number of arguments (given 0, expected 1..2)
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/enum.rb:216:in `enum'
/Users/nate/budget-tracker/server/app/models/budget_category.rb:5:in `<class:BudgetCategory>'
/Users/nate/budget-tracker/server/app/models/budget_category.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:290:in `const_get'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:290:in `constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/inflector/methods.rb:316:in `safe_constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/core_ext/string/inflections.rb:87:in `safe_constantize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:259:in `block in compute_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:258:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:258:in `compute_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:496:in `compute_class'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:431:in `_klass'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:423:in `klass'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:763:in `automatic_inverse_of'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `block in inverse_name'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `fetch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:751:in `inverse_name'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:675:in `has_inverse?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:265:in `check_validity_of_inverse!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/reflection.rb:619:in `check_validity!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association.rb:42:in `initialize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:58:in `new'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations.rb:58:in `association'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/builder/association.rb:105:in `budget_categories'
/Users/nate/budget-tracker/server/app/graphql/types/budget_type.rb:12:in `total_amount'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:359:in `evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:315:in `block (3 levels) in evaluate_selections'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 42ms (Views: 0.2ms | ActiveRecord: 1.5ms (1 query, 0 cached) | GC: 1.8ms)


  [1m[36mBudget Load (2.6ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mBudget Delete All (0.4ms)[0m  [1m[31mDELETE FROM "budgets"[0m
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mBudget Delete All (0.2ms)[0m  [1m[31mDELETE FROM "budgets"[0m
  [1m[36mBudgetCategory Load (2.8ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started POST "/graphql" for ::1 at 2025-08-12 09:34:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.0ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 46ms (Views: 0.2ms | ActiveRecord: 3.6ms (6 queries, 0 cached) | GC: 2.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:35:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:38:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.7ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 35ms (Views: 0.2ms | ActiveRecord: 2.0ms (3 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:39:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:39:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (3 queries, 0 cached) | GC: 0.3ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddCategoryTypeToBudgetCategories (20250812162748)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mDROP INDEX "index_budget_categories_on_category_type"[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'budget' NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_a928ada795"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.0ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250812162748'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 09:42:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (2.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
Undeclared attribute type for enum 'category_type' in BudgetCategory. Enums must be backed by a database column or declared with an explicit type via `attribute`.
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/enum.rb:242:in `block in _enum'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:71:in `block in apply_to'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:69:in `apply_to'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:87:in `block in apply_pending_attribute_modifications'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:86:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:86:in `apply_pending_attribute_modifications'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attributes.rb:250:in `_default_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/model_schema.rb:596:in `load_schema!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/counter_cache.rb:187:in `load_schema!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/encryption/encryptable_record.rb:127:in `load_schema!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/model_schema.rb:539:in `block in load_schema'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/model_schema.rb:536:in `synchronize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/model_schema.rb:536:in `load_schema'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/model_schema.rb:428:in `columns_hash'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attributes.rb:244:in `block in _default_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/connection_adapters/abstract/connection_pool.rb:418:in `with_connection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/connection_handling.rb:310:in `with_connection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attributes.rb:243:in `_default_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:38:in `attribute_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_registration.rb:49:in `type_for_attribute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/type_caster/map.rb:16:in `type_for_attribute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/arel/table.rb:107:in `type_for_attribute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/table_metadata.rb:18:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:59:in `build'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:54:in `[]'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:145:in `block in expand_from_hash'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:87:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:87:in `flat_map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:87:in `expand_from_hash'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/predicate_builder.rb:25:in `build_from_hash'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/query_methods.rb:1643:in `build_where_clause'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/query_methods.rb:1044:in `where!'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:163:in `apply_scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:66:in `block in last_chain_scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:64:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:64:in `last_chain_scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:125:in `add_constraints'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:29:in `scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association_scope.rb:7:in `scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association.rb:305:in `association_scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/association.rb:115:in `scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/collection_association.rb:299:in `scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/collection_proxy.rb:950:in `scope'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/collection_proxy.rb:1137:in `eager_load_values'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation.rb:1240:in `eager_loading?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/calculations.rb:431:in `has_include?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/calculations.rb:231:in `calculate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/associations/collection_proxy.rb:725:in `calculate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/relation/calculations.rb:176:in `sum'
/Users/nate/budget-tracker/server/app/graphql/types/budget_type.rb:12:in `total_amount'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:359:in `evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:315:in `block (3 levels) in evaluate_selections'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 58ms (Views: 0.4ms | ActiveRecord: 3.6ms (1 query, 0 cached) | GC: 4.7ms)


  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddCategoryTypeToBudgetCategories (20250812162748)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "budget_categories" ADD "category_type" varchar DEFAULT 'monthly_budget' NOT NULL[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812162748') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 09:43:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.8ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 51ms (Views: 0.2ms | ActiveRecord: 3.7ms (6 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:43:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:43:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"2"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"2"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:44:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.7ms (6 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 09:44:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 0 cached) | GC: 0.2ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddCategoryTypeToBudgetCategories (20250812162748)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.6ms)[0m  [1m[35mDROP INDEX "index_budget_categories_on_category_type"[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'monthly_budget' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, CONSTRAINT "fk_rails_a928ada795"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_budget_id" ON "budget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","budget_id","name","amount","description","created_at","updated_at")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at" FROM "abudget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.1ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250812162748'[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddCategoryTypeToBudgetCategories (20250812162748)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "budget_categories" ADD "category_type" varchar DEFAULT 'variable_expense' NOT NULL[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812162748') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 10:17:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.5ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 49ms (Views: 0.3ms | ActiveRecord: 2.1ms (6 queries, 0 cached) | GC: 2.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 10:17:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 0 cached) | GC: 0.0ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateAccounts (20250812175059)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.8ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812175059') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mTransaction Load (2.9ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mBudgetCategory Delete All (0.4ms)[0m  [1m[31mDELETE FROM "budget_categories"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mAccount Load (3.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "transactions" ADD "account_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "transactions" ADD "amount_cents" integer[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "occurred_on" date[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "transactions" ADD "memo" varchar[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[36mAddAccountReferenceToTransactions::Account Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."name" = ? LIMIT ?[0m  [["name", "Monthly Budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[35mSAVEPOINT active_record_1[0m
  [1m[36mAddAccountReferenceToTransactions::Account Create (0.2ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Monthly Budget"], ["account_type", "monthly_budget"], ["starting_balance_cents", 0], ["created_at", "2025-08-12 18:26:25.936834"], ["updated_at", "2025-08-12 18:26:25.936834"]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[35mRELEASE SAVEPOINT active_record_1[0m
  [1m[36mAddAccountReferenceToTransactions::Transaction Update All (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "account_id" = ? WHERE "transactions"."account_id" IS NULL[0m  [["account_id", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."memo" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "memo" = ? WHERE "transactions"."id" = ?[0m  [["memo", "Weekly Groceries"], ["id", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."amount_cents" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "amount_cents" = ?, "occurred_on" = ? WHERE "transactions"."id" = ?[0m  [["amount_cents", 16200], ["occurred_on", "2025-08-04"], ["id", 1]]
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "amount" decimal, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","amount","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "date" datetime(6), "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","date","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","description","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "description" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","description","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","description","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_71101f657c"
FOREIGN KEY ("budget_id")
  REFERENCES "budgets" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_id" ON "transactions" ("budget_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_id" integer, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_id" ON "atransactions" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_id","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812175524') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.0ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "transactions" ADD "amount" decimal[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "date" datetime(6)[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "description" varchar[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "budget_id" integer[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mDROP INDEX "index_transactions_on_occurred_on"[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo","amount","date","description","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","amount","date","description","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","amount","date","description","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","amount","date","description","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","amount","date","description","budget_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount","date","description","budget_id" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Destroy (0.1ms)[0m  [1m[31mDELETE FROM "schema_migrations" WHERE "schema_migrations"."version" = '20250812175524'[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "transactions" ADD "account_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "transactions" ADD "amount_cents" integer[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "occurred_on" date[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "memo" varchar[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[36mAddAccountReferenceToTransactions::Account Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."name" = ? LIMIT ?[0m  [["name", "Monthly Budget"], ["LIMIT", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update All (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "account_id" = ? WHERE "transactions"."account_id" IS NULL[0m  [["account_id", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."memo" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "memo" = ? WHERE "transactions"."id" = ?[0m  [["memo", nil], ["id", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."amount_cents" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update (0.2ms)[0m  [1m[33mUPDATE "transactions" SET "amount_cents" = ?, "occurred_on" = ? WHERE "transactions"."id" = ?[0m  [["amount_cents", nil], ["occurred_on", "2025-08-12"], ["id", 1]]
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
Started POST "/graphql" for ::1 at 2025-08-12 11:30:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 49ms (Views: 0.1ms | ActiveRecord: 1.9ms (6 queries, 0 cached) | GC: 1.6ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mTransaction Load (2.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Delete All (0.7ms)[0m  [1m[31mDELETE FROM "transactions"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddAccountReferenceToTransactions (20250812175524)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "transactions" ADD "account_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.3ms)[0m  [1m[35mALTER TABLE "transactions" ADD "amount_cents" integer[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "occurred_on" date[0m
  [1m[35m (0.2ms)[0m  [1m[35mALTER TABLE "transactions" ADD "memo" varchar[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[36mAddAccountReferenceToTransactions::Account Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."name" = ? LIMIT ?[0m  [["name", "Monthly Budget"], ["LIMIT", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Update All (0.1ms)[0m  [1m[33mUPDATE "transactions" SET "account_id" = ? WHERE "transactions"."account_id" IS NULL[0m  [["account_id", 1]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."memo" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[36mAddAccountReferenceToTransactions::Transaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."amount_cents" IS NULL ORDER BY "transactions"."id" ASC LIMIT ?[0m  [["LIMIT", 1000]]
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "amount" decimal, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","amount","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "date" datetime(6), "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","date","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","date","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "description" varchar, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","description","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","description","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","budget_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "budget_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","budget_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","budget_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812175524') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 11:33:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (1.7ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.2ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 77ms (Views: 0.3ms | ActiveRecord: 4.2ms (6 queries, 0 cached) | GC: 3.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 11:33:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 11:34:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.2ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 12ms (Views: 0.1ms | ActiveRecord: 0.8ms (6 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 11:36:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudget", "variables"=>{"id"=>"5"}, "query"=>"query GetBudget($id: ID!) {\n  budget(id: $id) {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      transactions {\n        id\n        budgetCategoryId\n        description\n        amount\n        date\n        createdAt\n        updatedAt\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (0.1ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets" WHERE "budgets"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Sum (0.1ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 11:36:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"3"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategory", "variables"=>{"id"=>"3"}, "query"=>"query GetBudgetCategory($id: ID!) {\n  budgetCategory(id: $id) {\n    id\n    budgetId\n    name\n    amount\n    description\n    createdAt\n    updatedAt\n    transactions {\n      id\n      budgetCategoryId\n      description\n      amount\n      date\n      createdAt\n      updatedAt\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 11:51:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudget Load (2.3ms)[0m  [1m[34mSELECT "budgets".* FROM "budgets"[0m
  [1m[36mBudgetCategory Sum (0.5ms)[0m  [1m[34mSELECT SUM("budget_categories"."amount") FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."budget_id" = ?[0m  [["budget_id", 5]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 2]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 3]]
Completed 200 OK in 15ms (Views: 0.1ms | ActiveRecord: 3.3ms (6 queries, 0 cached) | GC: 0.4ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.7ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to MakeBudgetCategoryNullableForTransactions (20250812193104)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.4ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer NOT NULL, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812193104') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? LIMIT ?[0m  [["account_type", "load"], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."name" = ? LIMIT ?[0m  [["name", "Groceries"], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."name" = ? LIMIT ?[0m  [["name", "LOC Repayment"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-12 19:39:22.347536"], ["updated_at", "2025-08-12 19:39:22.347536"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -15000], ["occurred_on", "2025-08-12"], ["memo", "Tuesday market"]]
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."name" = ? LIMIT ?[0m  [["name", "LOC Repayment"], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."name" = ? LIMIT ?[0m  [["name", "LOC Repayment"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (1.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RemoveBudgetsTable (20250812195906)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.5ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to RemoveBudgetsTable (20250812195906)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "budget_id" integer NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_budget_id" ON "abudget_categories" ("budget_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","budget_id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","budget_id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budgets"[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250812195906') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-12 13:06:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgets", "variables"=>{}, "query"=>"query GetBudgets {\n  budgets {\n    id\n    name\n    description\n    totalAmount\n    createdAt\n    updatedAt\n    budgetCategories {\n      id\n      name\n      amount\n      description\n      categoryType\n      transactions {\n        id\n        amount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Types::QueryType::Budget
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/object.rb:135:in `const_missing'
/Users/nate/budget-tracker/server/app/graphql/types/query_type.rb:28:in `budgets'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:760:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:903:in `block in with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:939:in `block (2 levels) in run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:942:in `run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:939:in `block in run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field_extension.rb:134:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:926:in `run_extensions_before_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:898:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:359:in `evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:315:in `block (3 levels) in evaluate_selections'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 33ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:20:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 285ms (Views: 0.3ms | ActiveRecord: 9.2ms (4 queries, 0 cached) | GC: 3.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:20:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:21:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:21:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.5ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:21:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.5ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:21:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:21:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:52:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Mutations::UpdateAccount
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:6:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 147ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 3.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:52:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Mutations::UpdateAccount
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:6:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:54:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 140ms (Views: 0.2ms | ActiveRecord: 8.8ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:54:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:54:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 17ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 12.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:56:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.5ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:56:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:56:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:56:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"UpdateAccount", "variables"=>{"id"=>"1", "name"=>"Monthly Budget", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"UpdateAccount", "variables"=>{"id"=>"1", "name"=>"Monthly Budget", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Update (1.3ms)[0m  [1m[33mUPDATE "accounts" SET "starting_balance_cents" = ?, "updated_at" = ? WHERE "accounts"."id" = ?[0m  [["starting_balance_cents", 900000], ["updated_at", "2025-08-12 20:56:52.186000"], ["id", 1]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 2.0ms (3 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 13:56:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:12:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Nathen LOC", "accountType"=>"loan", "startingBalance"=>12500}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Nathen LOC", "accountType"=>"loan", "startingBalance"=>12500}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Create (1.4ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Nathen LOC"], ["account_type", "loan"], ["starting_balance_cents", 1250000], ["created_at", "2025-08-12 21:12:30.768641"], ["updated_at", "2025-08-12 21:12:30.768641"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 1.9ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:12:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:12:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:15:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 13ms (Views: 0.1ms | ActiveRecord: 1.0ms (5 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:19:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 270ms (Views: 0.5ms | ActiveRecord: 8.8ms (5 queries, 0 cached) | GC: 3.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:19:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:19:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:20:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:22:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 57ms (Views: 0.2ms | ActiveRecord: 2.9ms (5 queries, 0 cached) | GC: 15.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:22:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 34ms (Views: 0.2ms | ActiveRecord: 3.3ms (3 queries, 0 cached) | GC: 2.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:22:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (1.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 27ms (Views: 0.1ms | ActiveRecord: 1.6ms (2 queries, 0 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:28:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 52ms (Views: 0.6ms | ActiveRecord: 2.2ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:28:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:28:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:29:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 42ms (Views: 0.2ms | ActiveRecord: 3.0ms (5 queries, 0 cached) | GC: 1.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:29:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:29:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:29:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 14:50:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 2.1ms (5 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:57:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (1.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-12 16:57:19 -0700
Completed 200 OK in 152ms (Views: 0.2ms | ActiveRecord: 5.0ms (4 queries, 0 cached) | GC: 10.1ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 58ms (Views: 0.2ms | ActiveRecord: 5.7ms (5 queries, 0 cached) | GC: 2.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:57:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:57:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:57:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}, "query"=>"mutation CreateTransaction($accountId: ID!, $budgetCategoryId: ID, $loanAccountId: ID, $memo: String!, $amount: Float!, $occurredOn: ISO8601Date) {\n  createTransaction(\n    input: {accountId: $accountId, budgetCategoryId: $budgetCategoryId, loanAccountId: $loanAccountId, memo: $memo, amount: $amount, occurredOn: $occurredOn}\n  ) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}, "query"=>"mutation CreateTransaction($accountId: ID!, $budgetCategoryId: ID, $loanAccountId: ID, $memo: String!, $amount: Float!, $occurredOn: ISO8601Date) {\n  createTransaction(\n    input: {accountId: $accountId, budgetCategoryId: $budgetCategoryId, loanAccountId: $loanAccountId, memo: $memo, amount: $amount, occurredOn: $occurredOn}\n  ) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:58:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 13ms (Views: 0.3ms | ActiveRecord: 0.6ms (5 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:58:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:58:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:59:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 16:59:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:02:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::CreateTransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:8:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 12ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:02:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Groceries", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::CreateTransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:8:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 10ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:03:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Types::CreateTransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:8:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 140ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 3.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:03:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Types::CreateTransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:8:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 5ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:05:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 148ms (Views: 0.2ms | ActiveRecord: 10.4ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:05:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:05:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:06:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x0000000112fe1c40>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:598:in `visit_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:587:in `reachable_type_set'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:269:in `reachable_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:174:in `all_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:12:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 6ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:08:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 51ms (Views: 0.2ms | ActiveRecord: 2.8ms (5 queries, 0 cached) | GC: 2.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:08:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:08:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:08:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>200, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x00000001134efa20>, Types::CreateTransactionInput
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:598:in `visit_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:587:in `reachable_type_set'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:269:in `reachable_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:174:in `all_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:12:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 3ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:10:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (9.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 275ms (Views: 0.3ms | ActiveRecord: 17.2ms (5 queries, 0 cached) | GC: 3.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:10:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 0.6ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:10:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:10:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010f0fe438>, Types::CreateTransactionInput
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:598:in `visit_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:587:in `reachable_type_set'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:269:in `reachable_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:174:in `all_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:12:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 5ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:12:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.9ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 264ms (Views: 0.3ms | ActiveRecord: 10.2ms (5 queries, 0 cached) | GC: 3.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:12:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:12:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:12:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010c19e9e0>, Types::CreateTransactionInput
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:598:in `visit_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:587:in `reachable_type_set'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:269:in `reachable_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:174:in `all_types'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:12:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 5ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:13:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 240ms (Views: 0.3ms | ActiveRecord: 6.8ms (5 queries, 0 cached) | GC: 4.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:13:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:13:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:13:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x0000000107f4a1e8>, Types::CreateTransactionInput
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:14:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 74ms (Views: 0.2ms | ActiveRecord: 3.5ms (5 queries, 0 cached) | GC: 16.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:14:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:14:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.7ms (2 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:14:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:16:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 17ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.2ms)


Interface `Node` hidden because it has no visible implementers
Started POST "/graphql" for ::1 at 2025-08-12 17:17:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 15ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:18:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:18:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:19:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 69ms (Views: 0.1ms | ActiveRecord: 3.7ms (5 queries, 0 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:19:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:19:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:19:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:20:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (3.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:20:14.000036"], ["updated_at", "2025-08-13 00:20:14.000036"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -42689], ["occurred_on", "2025-08-12"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 23ms (Views: 0.1ms | ActiveRecord: 5.0ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:20:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:23:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 52ms (Views: 0.2ms | ActiveRecord: 2.8ms (6 queries, 1 cached) | GC: 2.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:23:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 1 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:23:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:24:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:24:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 19ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:25:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>426.89, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:25:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 60ms (Views: 0.1ms | ActiveRecord: 8.0ms (6 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:25:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.6ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:25:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:25:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:29:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010898c1d8>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 24ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:30:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-10"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010898c1d8>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:32:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 264ms (Views: 0.4ms | ActiveRecord: 9.3ms (6 queries, 1 cached) | GC: 3.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:32:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.5ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:32:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:33:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010baedc18>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:35:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 26ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 13.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:35:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 150ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 3.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:35:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 21ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:35:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 3ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:35:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:36:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInputType
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 12ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:36:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 207ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 3.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:37:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:37:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 18ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:38:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Interface `Node` hidden because it has no visible implementers
Started POST "/graphql" for ::1 at 2025-08-12 17:39:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:39:48.654968"], ["updated_at", "2025-08-13 00:39:48.654968"], ["budget_category_id", 3], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-12"], ["memo", "Gas station"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 102ms (Views: 0.1ms | ActiveRecord: 10.8ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:39:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 36ms (Views: 0.1ms | ActiveRecord: 0.8ms (6 queries, 1 cached) | GC: 14.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:43:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.4ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 63ms (Views: 0.2ms | ActiveRecord: 3.8ms (7 queries, 1 cached) | GC: 3.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:43:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:43:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:43:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInputType!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Interface `Node` hidden because it has no visible implementers
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:43:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:44:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:44:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 284ms (Views: 0.3ms | ActiveRecord: 7.6ms (7 queries, 1 cached) | GC: 4.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:44:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:44:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:44:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:46:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    id\n    accountId\n    budgetCategoryId\n    memo\n    amount\n    occurredOn\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    id\n    accountId\n    budgetCategoryId\n    memo\n    amount\n    occurredOn\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
missing keywords: :object, :context, :field
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:36:in `initialize'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:15:in `new'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:15:in `create_transaction'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 17ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:47:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    id\n    accountId\n    budgetCategoryId\n    memo\n    amount\n    occurredOn\n    createdAt\n    updatedAt\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    id\n    accountId\n    budgetCategoryId\n    memo\n    amount\n    occurredOn\n    createdAt\n    updatedAt\n    __typename\n  }\n}"}}
Completed 200 OK in 29ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 14.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:50:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "loanAccountId"=>nil, "memo"=>"Mortgage", "amount"=>1900, "occurredOn"=>"2025-08-18"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:50:14.979549"], ["updated_at", "2025-08-13 00:50:14.979549"], ["budget_category_id", 2], ["account_id", 1], ["amount_cents", -190000], ["occurred_on", "2025-08-18"], ["memo", "Mortgage"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 40ms (Views: 0.1ms | ActiveRecord: 3.4ms (3 queries, 0 cached) | GC: 3.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:50:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.6ms (7 queries, 1 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:53:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-13"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-13"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:53:40.857880"], ["updated_at", "2025-08-13 00:53:40.857880"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-13"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.7ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:53:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.5ms (8 queries, 2 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:54:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-13"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-13"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:54:08.378032"], ["updated_at", "2025-08-13 00:54:08.378032"], ["budget_category_id", 3], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-13"], ["memo", "Gas station"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 1.2ms (3 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:54:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.6ms (9 queries, 3 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:56:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:56:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-05"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-05"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 00:56:54.221061"], ["updated_at", "2025-08-13 00:56:54.221061"], ["budget_category_id", 3], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-05"], ["memo", "Gas station"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.7ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:56:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.6ms (10 queries, 4 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 12ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
uninitialized constant Types::TransactionInput
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:5:in `<class:CreateTransaction>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:2:in `<module:Mutations>'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:9:in `<class:MutationType>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:4:in `<module:Types>'
/Users/nate/code/budget-tracker/server/app/graphql/types/mutation_type.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
/Users/nate/code/budget-tracker/server/app/graphql/server_schema.rb:3:in `<main>'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
<internal:/Users/nate/.rbenv/versions/3.2.8/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:38:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/bootsnap-1.18.6/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/zeitwerk-2.7.3/lib/zeitwerk/core_ext/kernel.rb:26:in `require'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 4ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 59ms (Views: 0.2ms | ActiveRecord: 3.4ms (11 queries, 4 cached) | GC: 7.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.5ms (10 queries, 4 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 17:59:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:00:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: TransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:00:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010ff46c20>, Types::TransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 15ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:01:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000010f563ca8>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 15ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:02:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000011124e2f0>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 214ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 3.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:02:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Found two visible definitions for `CreateTransactionInput`: #<Class:0x000000011124e2f0>, Types::CreateTransactionInputType
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:389:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:384:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:256:in `block in get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:500:in `block in read_through'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:264:in `get_type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/warden.rb:134:in `type'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_input_types.rb:7:in `on_variable_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:70:in `block in on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:69:in `on_operation_definition_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:47:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/subscription_root_exists_and_single_subscription_selection.rb:21:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/query_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/mutation_root_exists.rb:12:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_usages_are_allowed.rb:13:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:44:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variable_names_are_unique.rb:20:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_have_appropriate_selections.rb:18:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fields_will_merge.rb:26:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:12:in `on_operation_definition'
(eval):5:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/base_visitor.rb:60:in `on_operation_definition'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:28:in `block in on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:26:in `on_document_children'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:111:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/definition_dependencies.rb:38:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/variables_are_used_and_defined.rb:79:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_spreads_are_possible.rb:26:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_used.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragments_are_finite.rb:6:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/fragment_names_are_unique.rb:17:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/operation_names_are_valid.rb:16:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/rules/no_definitions_are_present.rb:34:in `on_document'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/language/static_visitor.rb:16:in `visit'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:47:in `block (3 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `catch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:46:in `block (2 levels) in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:185:in `block in timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:38:in `handle_timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/timeout-0.4.3/lib/timeout.rb:194:in `timeout'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:45:in `block in validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:33:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/static_validation/validator.rb:32:in `validate'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:72:in `ensure_has_validated'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query/validation_pipeline.rb:33:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:364:in `valid?'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:32:in `block (2 levels) in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `map'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:31:in `block in analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:53:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/analysis.rb:30:in `analyze_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:52:in `block in run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:64:in `execute_multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter.rb:42:in `run_all'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1603:in `multiplex'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema.rb:1578:in `execute'
/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:5:in `execute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/basic_implicit_render.rb:8:in `send_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:226:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rendering.rb:193:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:261:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/callbacks.rb:260:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/rescue.rb:27:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `block in instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications/instrumenter.rb:58:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/notifications.rb:210:in `instrument'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/instrumentation.rb:75:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/railties/controller_runtime.rb:39:in `process_action'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/abstract_controller/base.rb:163:in `process'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:252:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_controller/metal.rb:335:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:50:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:53:in `block in serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:126:in `find_routes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/journey/router.rb:34:in `serve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/routing/route_set.rb:908:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine/lazy_route_set.rb:68:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/tempfile_reaper.rb:20:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/etag.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/conditional_get.rb:44:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/head.rb:15:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/permissions_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/http/content_security_policy.rb:38:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:274:in `context'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-session-2.1.1/lib/rack/session/abstract/id.rb:268:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/cookies.rb:706:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activesupport-8.0.2/lib/active_support/callbacks.rb:100:in `run_callbacks'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/callbacks.rb:30:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:41:in `call_app'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/rack/logger.rb:29:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/request_id.rb:34:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/method_override.rb:28:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/runtime.rb:24:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/server_timing.rb:60:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/executor.rb:16:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/static.rb:27:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-3.2.0/lib/rack/sendfile.rb:114:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/actionpack-8.0.2/lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/rack-cors-3.0.0/lib/rack/cors.rb:102:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/railties-8.0.2/lib/rails/engine.rb:535:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/configuration.rb:279:in `call'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:99:in `block in handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:390:in `with_force_shutdown'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/request.rb:98:in `handle_request'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:472:in `process_client'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/server.rb:254:in `block in run'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/puma-6.6.1/lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 500 Internal Server Error in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:06:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-05"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.8ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:06:28.293340"], ["updated_at", "2025-08-13 01:06:28.293340"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-05"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 92ms (Views: 0.2ms | ActiveRecord: 10.9ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:06:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.2ms | ActiveRecord: 0.8ms (11 queries, 5 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:09:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:09:48.093638"], ["updated_at", "2025-08-13 01:09:48.093638"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-12"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 40ms (Views: 0.2ms | ActiveRecord: 3.3ms (3 queries, 0 cached) | GC: 3.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:09:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 0.7ms (12 queries, 6 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.7ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 250ms (Views: 0.4ms | ActiveRecord: 8.7ms (13 queries, 6 cached) | GC: 4.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.2ms | ActiveRecord: 1.7ms (13 queries, 6 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.6ms (12 queries, 6 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:10:26.622107"], ["updated_at", "2025-08-13 01:10:26.622107"], ["budget_category_id", nil], ["account_id", 1], ["amount_cents", 10000], ["occurred_on", "2025-08-13"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 1.1ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.5ms (12 queries, 6 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:10:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:11:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:11:11.728909"], ["updated_at", "2025-08-13 01:11:11.728909"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.6ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:11:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.2ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:12:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
undefined method `pry' for #<Binding:0x00000001094cd100>
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:16:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 16ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:13:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
undefined method `pry' for #<Binding:0x00000001135385e0>
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:16:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 138ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 4.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:13:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 500 Internal Server Error in 32833ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 44.7ms)


  
SystemExit (exit):
  
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `exit'
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `resolve'
app/graphql/mutations/create_transaction.rb:16:in `resolve'
  [1m[36mAccount Load (3.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started POST "/graphql" for ::1 at 2025-08-12 18:15:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (3.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (1.2ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Credit Card Payment"], ["amount", 0.0], ["description", nil], ["created_at", "2025-08-13 01:18:24.085429"], ["updated_at", "2025-08-13 01:18:24.085429"], ["category_type", "debt_repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mAccount Load (3.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
Completed 500 Internal Server Error in 211289ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 40.8ms)


  
SystemExit (exit):
  
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `exit'
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `resolve'
app/graphql/mutations/create_transaction.rb:16:in `resolve'
Started POST "/graphql" for ::1 at 2025-08-12 18:19:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"Loan Repayment", "amount"=>100, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:19:04.588970"], ["updated_at", "2025-08-13 01:19:04.588970"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 10000], ["occurred_on", "2025-08-13"], ["memo", "Loan Repayment"]]
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 72ms (Views: 0.2ms | ActiveRecord: 7.9ms (2 queries, 0 cached) | GC: 3.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:19:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 15ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:21:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:21:24.072514"], ["updated_at", "2025-08-13 01:21:24.072514"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 37ms (Views: 0.1ms | ActiveRecord: 3.0ms (2 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:21:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 35ms (Views: 0.2ms | ActiveRecord: 2.0ms (14 queries, 7 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 0.7ms (12 queries, 6 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 45ms (Views: 0.3ms | ActiveRecord: 1.7ms (14 queries, 7 cached) | GC: 10.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 0.6ms (12 queries, 6 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:22:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


  [1m[36mTransaction Load (2.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions"[0m
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-12 18:24:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.2ms (4 queries, 1 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:25:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>426.89, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>426.89, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:25:03.354785"], ["updated_at", "2025-08-13 01:25:03.354785"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 42689], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.6ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:25:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.2ms (4 queries, 1 cached) | GC: 0.0ms)


  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."name" = ? LIMIT ?[0m  [["name", "Credit Card Payment"], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-12 18:27:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-16"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>nil, "loanAccountId"=>nil, "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-16"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:27:32.488827"], ["updated_at", "2025-08-13 01:27:32.488827"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-16"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 39ms (Views: 0.2ms | ActiveRecord: 3.2ms (2 queries, 0 cached) | GC: 2.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:27:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.3ms (4 queries, 1 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:30:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Creating debt repayment transaction
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:30:10.615008"], ["updated_at", "2025-08-13 01:30:10.615008"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:30:10.616353"], ["updated_at", "2025-08-13 01:30:10.616353"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 21ms (Views: 0.1ms | ActiveRecord: 1.2ms (5 queries, 1 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:30:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.6ms (5 queries, 1 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:30:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Creating debt repayment transaction
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:30:35.078434"], ["updated_at", "2025-08-13 01:30:35.078434"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:30:35.079464"], ["updated_at", "2025-08-13 01:30:35.079464"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.9ms (5 queries, 1 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:30:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.4ms (6 queries, 2 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:33:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Creating debt repayment transaction
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Loan account: #<Account id: 2, name: "Nathen LOC", account_type: "loan", starting_balance_cents: 1250000, created_at: "2025-08-12 21:12:30.768641000 +0000", updated_at: "2025-08-12 21:12:30.768641000 +0000">
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:33:28.736017"], ["updated_at", "2025-08-13 01:33:28.736017"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:33:28.736986"], ["updated_at", "2025-08-13 01:33:28.736986"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 50ms (Views: 0.1ms | ActiveRecord: 3.4ms (5 queries, 1 cached) | GC: 7.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:33:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.4ms (7 queries, 3 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:34:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Creating debt repayment transaction
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Loan account: #<Account id: 2, name: "Nathen LOC", account_type: "loan", starting_balance_cents: 1250000, created_at: "2025-08-12 21:12:30.768641000 +0000", updated_at: "2025-08-12 21:12:30.768641000 +0000">
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:34:00.165359"], ["updated_at", "2025-08-13 01:34:00.165359"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:34:00.166421"], ["updated_at", "2025-08-13 01:34:00.166421"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.9ms (5 queries, 1 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:34:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 0.5ms (8 queries, 4 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:37:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 101ms (Views: 0.5ms | ActiveRecord: 4.3ms (17 queries, 9 cached) | GC: 3.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:37:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 66ms (Views: 0.2ms | ActiveRecord: 3.0ms (12 queries, 6 cached) | GC: 7.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:37:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:37:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>100, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:37:35.556468"], ["updated_at", "2025-08-13 01:37:35.556468"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-15"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 1.2ms (3 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:37:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 0.9ms (13 queries, 7 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:38:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>500, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>500, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:38:00.832863"], ["updated_at", "2025-08-13 01:38:00.832863"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-13"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.7ms (3 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:38:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.7ms (14 queries, 8 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:38:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 53ms (Views: 0.4ms | ActiveRecord: 1.7ms (19 queries, 11 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:38:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 0.8ms (14 queries, 8 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:38:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:39:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
Completed 500 Internal Server Error in 13ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 6.6ms)


  
SyntaxError (/Users/nate/code/budget-tracker/server/app/graphql/types/account_type.rb:24: syntax error, unexpected `end'):
  
app/graphql/types/account_type.rb:24: syntax error, unexpected `end'
app/graphql/mutations/create_account.rb:7:in `<class:CreateAccount>'
app/graphql/mutations/create_account.rb:2:in `<module:Mutations>'
app/graphql/mutations/create_account.rb:1:in `<main>'
app/graphql/types/mutation_type.rb:5:in `<class:MutationType>'
app/graphql/types/mutation_type.rb:4:in `<module:Types>'
app/graphql/types/mutation_type.rb:3:in `<main>'
app/graphql/server_schema.rb:4:in `<class:ServerSchema>'
app/graphql/server_schema.rb:3:in `<main>'
app/controllers/graphql_controller.rb:5:in `execute'
Started POST "/graphql" for ::1 at 2025-08-12 18:42:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "loanAccountId"=>nil, "memo"=>"Gas station", "amount"=>100, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:42:43.717785"], ["updated_at", "2025-08-13 01:42:43.717785"], ["budget_category_id", 3], ["account_id", 1], ["amount_cents", -10000], ["occurred_on", "2025-08-12"], ["memo", "Gas station"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 45ms (Views: 0.1ms | ActiveRecord: 3.2ms (3 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:42:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.2ms | ActiveRecord: 0.8ms (15 queries, 9 cached) | GC: 4.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:42:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 38ms (Views: 0.3ms | ActiveRecord: 1.6ms (20 queries, 12 cached) | GC: 1.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:42:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.7ms (15 queries, 9 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:42:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:47:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 281ms (Views: 0.6ms | ActiveRecord: 7.5ms (20 queries, 12 cached) | GC: 3.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:47:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 0.8ms (15 queries, 9 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:47:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:48:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.8ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 57ms (Views: 0.5ms | ActiveRecord: 2.7ms (20 queries, 12 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:48:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 0.6ms (15 queries, 9 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:48:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:48:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-21"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"1", "loanAccountId"=>nil, "memo"=>"Grocery store", "amount"=>426.89, "occurredOn"=>"2025-08-21"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.6ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:48:33.409938"], ["updated_at", "2025-08-13 01:48:33.409938"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -42689], ["occurred_on", "2025-08-21"], ["memo", "Grocery store"]]
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 21ms (Views: 1.2ms | ActiveRecord: 2.0ms (3 queries, 0 cached) | GC: 1.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:48:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 20ms (Views: 0.2ms | ActiveRecord: 0.7ms (16 queries, 10 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 71ms (Views: 0.4ms | ActiveRecord: 4.6ms (21 queries, 13 cached) | GC: 2.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 0.7ms (16 queries, 10 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 83ms (Views: 0.5ms | ActiveRecord: 4.5ms (21 queries, 13 cached) | GC: 9.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 0.9ms (16 queries, 10 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:50:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.4ms (7 queries, 3 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:55:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-16"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-16"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:55:37.135694"], ["updated_at", "2025-08-13 01:55:37.135694"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-16"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:55:37.136832"], ["updated_at", "2025-08-13 01:55:37.136832"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-16"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 39ms (Views: 0.1ms | ActiveRecord: 3.6ms (5 queries, 1 cached) | GC: 1.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:55:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.6ms (8 queries, 4 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:56:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 40ms (Views: 0.3ms | ActiveRecord: 2.0ms (22 queries, 14 cached) | GC: 6.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:56:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.5ms (8 queries, 4 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:56:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:05 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 70ms (Views: 0.3ms | ActiveRecord: 3.8ms (22 queries, 14 cached) | GC: 2.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.7ms (16 queries, 10 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 44ms (Views: 0.4ms | ActiveRecord: 1.5ms (22 queries, 14 cached) | GC: 7.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 0.7ms (16 queries, 10 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 75ms (Views: 0.3ms | ActiveRecord: 3.0ms (8 queries, 4 cached) | GC: 31.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:57:38.604054"], ["updated_at", "2025-08-13 01:57:38.604054"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 01:57:38.605253"], ["updated_at", "2025-08-13 01:57:38.605253"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 21ms (Views: 0.1ms | ActiveRecord: 1.3ms (5 queries, 1 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 18:57:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 15ms (Views: 0.3ms | ActiveRecord: 0.6ms (9 queries, 5 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:00:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 77ms (Views: 0.3ms | ActiveRecord: 4.8ms (23 queries, 15 cached) | GC: 3.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:00:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.5ms (9 queries, 5 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:00:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:01:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:01:02.247300"], ["updated_at", "2025-08-13 02:01:02.247300"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:01:02.248605"], ["updated_at", "2025-08-13 02:01:02.248605"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 19ms (Views: 0.1ms | ActiveRecord: 1.2ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:01:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 22ms (Views: 0.2ms | ActiveRecord: 0.5ms (10 queries, 6 cached) | GC: 4.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:02:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:02:22.366100"], ["updated_at", "2025-08-13 02:02:22.366100"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:02:22.367033"], ["updated_at", "2025-08-13 02:02:22.367033"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 38ms (Views: 0.1ms | ActiveRecord: 3.2ms (5 queries, 1 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:02:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.6ms (11 queries, 7 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:02:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" INNER JOIN "budget_categories" ON "budget_categories"."id" = "transactions"."budget_category_id" WHERE "transactions"."account_id" = ? AND "budget_categories"."category_type" = ? AND (amount_cents > 0)[0m  [["account_id", 1], ["category_type", "debt_repayment"]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 59ms (Views: 0.2ms | ActiveRecord: 1.2ms (17 queries, 10 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:02:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:02:52.841669"], ["updated_at", "2025-08-13 02:02:52.841669"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:02:52.843028"], ["updated_at", "2025-08-13 02:02:52.843028"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.9ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:02:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.3ms | ActiveRecord: 0.4ms (12 queries, 8 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:03:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.8ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:03:09.234149"], ["updated_at", "2025-08-13 02:03:09.234149"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:03:09.236266"], ["updated_at", "2025-08-13 02:03:09.236266"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 1.7ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:03:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.3ms | ActiveRecord: 0.5ms (13 queries, 9 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 76ms (Views: 0.4ms | ActiveRecord: 3.9ms (27 queries, 19 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 18ms (Views: 0.3ms | ActiveRecord: 0.5ms (13 queries, 9 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 269ms (Views: 0.5ms | ActiveRecord: 8.2ms (27 queries, 19 cached) | GC: 3.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 20ms (Views: 0.3ms | ActiveRecord: 0.6ms (13 queries, 9 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:04:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:05:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.6ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:05:03.844408"], ["updated_at", "2025-08-13 02:05:03.844408"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 02:05:03.846200"], ["updated_at", "2025-08-13 02:05:03.846200"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 1.6ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:05:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 21ms (Views: 0.3ms | ActiveRecord: 0.5ms (14 queries, 10 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 19:15:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 64ms (Views: 0.8ms | ActiveRecord: 2.9ms (28 queries, 20 cached) | GC: 13.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:02:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (11.7ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 299ms (Views: 0.8ms | ActiveRecord: 21.5ms (28 queries, 20 cached) | GC: 3.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:03:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 21ms (Views: 0.2ms | ActiveRecord: 0.8ms (16 queries, 10 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:03:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:04:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 65ms (Views: 0.3ms | ActiveRecord: 2.7ms (14 queries, 10 cached) | GC: 16.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:04:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 500 Internal Server Error in 93115ms (ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 44.3ms)


  
SystemExit (exit):
  
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `exit'
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `resolve'
app/graphql/mutations/create_transaction.rb:21:in `resolve'
Started POST "/graphql" for ::1 at 2025-08-12 21:06:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "loanAccountId"=>"2", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE Account Load (0.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:06:03.529463"], ["updated_at", "2025-08-13 04:06:03.529463"], ["budget_category_id", 4], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:06:03.530722"], ["updated_at", "2025-08-13 04:06:03.530722"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 45ms (Views: 0.1ms | ActiveRecord: 3.5ms (5 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:06:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.3ms | ActiveRecord: 0.7ms (15 queries, 11 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:11:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:11:38.089830"], ["updated_at", "2025-08-13 04:11:38.089830"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:11:38.091203"], ["updated_at", "2025-08-13 04:11:38.091203"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 44ms (Views: 0.1ms | ActiveRecord: 2.5ms (5 queries, 0 cached) | GC: 2.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:11:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 23ms (Views: 0.3ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:13:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:13:28.155315"], ["updated_at", "2025-08-13 04:13:28.155315"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:13:28.156413"], ["updated_at", "2025-08-13 04:13:28.156413"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 44ms (Views: 0.1ms | ActiveRecord: 3.7ms (5 queries, 0 cached) | GC: 1.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:13:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.3ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:14:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:14:20.381144"], ["updated_at", "2025-08-13 04:14:20.381144"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:14:20.382153"], ["updated_at", "2025-08-13 04:14:20.382153"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 42ms (Views: 0.1ms | ActiveRecord: 3.4ms (5 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:14:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.3ms | ActiveRecord: 0.8ms (15 queries, 11 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:14:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-29"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-29"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:14:40.481748"], ["updated_at", "2025-08-13 04:14:40.481748"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-29"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:14:40.482693"], ["updated_at", "2025-08-13 04:14:40.482693"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-29"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 43ms (Views: 0.1ms | ActiveRecord: 3.5ms (5 queries, 0 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:14:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.5ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:15:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:15:06.961931"], ["updated_at", "2025-08-13 04:15:06.961931"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:15:06.962874"], ["updated_at", "2025-08-13 04:15:06.962874"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 46ms (Views: 0.3ms | ActiveRecord: 3.4ms (5 queries, 0 cached) | GC: 1.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:15:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.4ms | ActiveRecord: 0.8ms (15 queries, 11 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:15:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 500 Internal Server Error in 13744ms (ActiveRecord: 7.8ms (2 queries, 0 cached) | GC: 46.8ms)


  
SystemExit (exit):
  
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `exit'
(rdbg)//Users/nate/code/budget-tracker/server/app/graphql/mutations/create_transaction.rb:1:in `resolve'
app/graphql/mutations/create_transaction.rb:20:in `resolve'
Started POST "/graphql" for ::1 at 2025-08-12 21:15:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-12"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:15:41.024389"], ["updated_at", "2025-08-13 04:15:41.024389"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:15:41.026671"], ["updated_at", "2025-08-13 04:15:41.026671"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 48ms (Views: 0.3ms | ActiveRecord: 3.5ms (5 queries, 0 cached) | GC: 17.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:15:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 38ms (Views: 0.3ms | ActiveRecord: 0.7ms (15 queries, 11 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:16:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:19:56.123457"], ["updated_at", "2025-08-13 04:19:56.123457"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:19:56.136148"], ["updated_at", "2025-08-13 04:19:56.136148"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 500 Internal Server Error in 341682ms (ActiveRecord: 10.9ms (5 queries, 0 cached) | GC: 214.5ms)


  
SystemExit (exit):
  
(rdbg)//Users/nate/code/budget-tracker/server/app/services/ledger.rb:1:in `exit'
(rdbg)//Users/nate/code/budget-tracker/server/app/services/ledger.rb:1:in `repay'
app/services/ledger.rb:32:in `repay'
app/graphql/mutations/create_transaction.rb:28:in `resolve'
Started POST "/graphql" for ::1 at 2025-08-12 21:22:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:22:08.444189"], ["updated_at", "2025-08-13 04:22:08.444189"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:22:08.445244"], ["updated_at", "2025-08-13 04:22:08.445244"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 50ms (Views: 0.2ms | ActiveRecord: 3.7ms (5 queries, 0 cached) | GC: 2.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:22:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 39ms (Views: 0.3ms | ActiveRecord: 0.7ms (15 queries, 11 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:22:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:22:36.230671"], ["updated_at", "2025-08-13 04:22:36.230671"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:22:36.231913"], ["updated_at", "2025-08-13 04:22:36.231913"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.9ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 179ms (Views: 0.2ms | ActiveRecord: 7.2ms (5 queries, 0 cached) | GC: 4.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:22:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 31ms (Views: 0.4ms | ActiveRecord: 0.7ms (15 queries, 11 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:25:13.385074"], ["updated_at", "2025-08-13 04:25:13.385074"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:25:13.386306"], ["updated_at", "2025-08-13 04:25:13.386306"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 62ms (Views: 0.1ms | ActiveRecord: 3.6ms (5 queries, 0 cached) | GC: 13.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-910378, balance=-10378
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 34ms (Views: 0.4ms | ActiveRecord: 1.0ms (26 queries, 19 cached) | GC: 2.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:25:39.600959"], ["updated_at", "2025-08-13 04:25:39.600959"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:25:39.603116"], ["updated_at", "2025-08-13 04:25:39.603116"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 1.2ms (5 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-647311, balance=602689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 27ms (Views: 0.3ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-960378, balance=-60378
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-647311, balance=602689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 66ms (Views: 0.6ms | ActiveRecord: 2.4ms (40 queries, 32 cached) | GC: 2.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-647311, balance=602689
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 25ms (Views: 0.4ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:25:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 10ms (Views: 0.3ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:28:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-960378, balance=-60378
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-647311, balance=602689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 81ms (Views: 0.5ms | ActiveRecord: 2.5ms (40 queries, 32 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:28:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-647311, balance=602689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 0.6ms (15 queries, 11 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:28:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 12ms (Views: 0.4ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 2.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:29:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:29:02.254086"], ["updated_at", "2025-08-13 04:29:02.254086"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:29:02.255267"], ["updated_at", "2025-08-13 04:29:02.255267"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 1.0ms (5 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:29:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-1010378, balance=-110378
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-597311, balance=652689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 56ms (Views: 0.5ms | ActiveRecord: 1.6ms (41 queries, 33 cached) | GC: 2.1ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:29:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-1010378, balance=-110378
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 30ms (Views: 0.4ms | ActiveRecord: 0.9ms (28 queries, 21 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:30:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-1010378, balance=-110378
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-597311, balance=652689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 101ms (Views: 0.6ms | ActiveRecord: 2.3ms (41 queries, 33 cached) | GC: 1.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:30:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-597311, balance=652689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 0.5ms (15 queries, 11 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:30:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:30:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:30:48.060221"], ["updated_at", "2025-08-13 04:30:48.060221"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:30:48.061314"], ["updated_at", "2025-08-13 04:30:48.061314"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 1.4ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:30:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Account Monthly Budget (monthly_budget): starting=900000, transactions=-1060378, balance=-160378
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Account Nathen LOC (loan): starting=1250000, transactions=-547311, balance=702689
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 53ms (Views: 0.7ms | ActiveRecord: 1.3ms (42 queries, 34 cached) | GC: 1.9ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:32:14.086155"], ["updated_at", "2025-08-13 04:32:14.086155"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:32:14.087356"], ["updated_at", "2025-08-13 04:32:14.087356"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 47ms (Views: 0.1ms | ActiveRecord: 3.7ms (5 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 51ms (Views: 0.5ms | ActiveRecord: 1.3ms (43 queries, 35 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 33ms (Views: 0.4ms | ActiveRecord: 1.0ms (30 queries, 23 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 76ms (Views: 0.6ms | ActiveRecord: 1.8ms (43 queries, 35 cached) | GC: 6.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 70ms (Views: 0.4ms | ActiveRecord: 0.7ms (15 queries, 11 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 10ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-20"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-20"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:32:56.460498"], ["updated_at", "2025-08-13 04:32:56.460498"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-20"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:32:56.461940"], ["updated_at", "2025-08-13 04:32:56.461940"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-20"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 1.0ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:32:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 55ms (Views: 0.5ms | ActiveRecord: 1.5ms (44 queries, 36 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:34:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:34:06.886719"], ["updated_at", "2025-08-13 04:34:06.886719"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:34:06.888074"], ["updated_at", "2025-08-13 04:34:06.888074"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 38ms (Views: 0.1ms | ActiveRecord: 3.8ms (5 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:34:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
BUDGET Account Monthly Budget: starting=900000, transactions=-1210378, balance=-310378
BUDGET transactions: -15000 (Tuesday market), -42689 (Grocery store), -10000 (Gas station), -190000 (Mortgage), -10000 (Grocery store), -10000 (Gas station), -10000 (Gas station), -10000 (Grocery store), -10000 (Grocery store), 10000 (Grocery store), -10000 (Grocery store), -50000 (Grocery store), -10000 (Gas station), -42689 (Grocery store), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment)
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
LOAN Account Nathen LOC: starting=1250000, transactions=-397311, balance=1647311
LOAN transactions: 50000 (August 15 Loan Repayment), 10000 (Loan Repayment), 50000 (August 15 Loan Repayment), 42689 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), -50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment), 50000 (August 15 Loan Repayment)
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 64ms (Views: 0.6ms | ActiveRecord: 1.5ms (45 queries, 37 cached) | GC: 6.7ms)


  [1m[36mTransaction Pluck (1.6ms)[0m  [1m[34mSELECT "transactions"."account_id", "transactions"."memo", "transactions"."amount_cents", "transactions"."occurred_on" FROM "transactions" GROUP BY "transactions"."account_id", "transactions"."memo", "transactions"."amount_cents", "transactions"."occurred_on" HAVING (count(*) > 1)[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 1], ["memo", "August 15 Loan Repayment"], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.1ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 46]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 48]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 52]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.4ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 56]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 58]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 60]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 62]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 64]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 66]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 68]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 70]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 74]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 1], ["memo", "Gas station"], ["amount_cents", -10000], ["occurred_on", "2025-08-12"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 26]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 2], ["memo", "August 15 Loan Repayment"], ["amount_cents", -50000], ["occurred_on", "2025-08-12"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.6ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 21]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 22]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 23]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 42]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 43]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 55]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 2], ["memo", "August 15 Loan Repayment"], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 17]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 18]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 19]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 30]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.6ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 32]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 33]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 34]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 36]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 38]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 40]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 45]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 47]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.0ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 49]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 53]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 57]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 2], ["memo", "August 15 Loan Repayment"], ["amount_cents", -50000], ["occurred_on", "2025-08-16"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 29]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ? AND "transactions"."memo" = ? AND "transactions"."amount_cents" = ? AND "transactions"."occurred_on" = ? ORDER BY "transactions"."created_at" ASC LIMIT -1 OFFSET ?[0m  [["account_id", 2], ["memo", "August 15 Loan Repayment"], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["OFFSET", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 13]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 31]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 35]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.4ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 37]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 39]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 41]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 59]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 61]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 63]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 65]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 67]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.2ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 69]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 71]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (1.0ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 75]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Started POST "/graphql" for ::1 at 2025-08-12 21:38:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 283ms (Views: 0.5ms | ActiveRecord: 6.7ms (23 queries, 15 cached) | GC: 3.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:38:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 2 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:38:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:38:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:38:48.515581"], ["updated_at", "2025-08-13 04:38:48.515581"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:38:48.517139"], ["updated_at", "2025-08-13 04:38:48.517139"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 1.5ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:38:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 32ms (Views: 0.3ms | ActiveRecord: 1.3ms (24 queries, 16 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:41:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 37ms (Views: 0.3ms | ActiveRecord: 0.8ms (20 queries, 13 cached) | GC: 12.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:43:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 73ms (Views: 0.5ms | ActiveRecord: 4.1ms (26 queries, 17 cached) | GC: 4.5ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:44:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:44:33.890232"], ["updated_at", "2025-08-13 04:44:33.890232"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:44:33.891168"], ["updated_at", "2025-08-13 04:44:33.891168"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 43ms (Views: 0.1ms | ActiveRecord: 3.2ms (5 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:44:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 31ms (Views: 0.3ms | ActiveRecord: 1.2ms (27 queries, 18 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:44:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 47ms (Views: 0.9ms | ActiveRecord: 1.4ms (25 queries, 17 cached) | GC: 10.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:44:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.4ms (6 queries, 2 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:44:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:01.088575"], ["updated_at", "2025-08-13 04:45:01.088575"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:01.089590"], ["updated_at", "2025-08-13 04:45:01.089590"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.9ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 32ms (Views: 0.5ms | ActiveRecord: 1.1ms (26 queries, 18 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:14.661666"], ["updated_at", "2025-08-13 04:45:14.661666"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:14.662735"], ["updated_at", "2025-08-13 04:45:14.662735"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.9ms (5 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 31ms (Views: 0.3ms | ActiveRecord: 1.4ms (27 queries, 19 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 26ms (Views: 0.3ms | ActiveRecord: 0.8ms (23 queries, 16 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.7ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:58.404825"], ["updated_at", "2025-08-13 04:45:58.404825"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 04:45:58.407350"], ["updated_at", "2025-08-13 04:45:58.407350"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 1.4ms (5 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-12 21:45:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 45ms (Views: 0.4ms | ActiveRecord: 1.3ms (28 queries, 20 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:12:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (13.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.9ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 370ms (Views: 0.5ms | ActiveRecord: 27.3ms (30 queries, 21 cached) | GC: 4.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:12:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"House Mortgage LOC", "accountType"=>"loan", "startingBalance"=>45000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"House Mortgage LOC", "accountType"=>"loan", "startingBalance"=>45000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Create (2.4ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at") VALUES (?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "House Mortgage LOC"], ["account_type", "loan"], ["starting_balance_cents", 4500000], ["created_at", "2025-08-13 14:12:43.186609"], ["updated_at", "2025-08-13 14:12:43.186609"]]
  [1m[36mTRANSACTION (1.0ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 4.0ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:12:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 30ms (Views: 0.4ms | ActiveRecord: 1.2ms (32 queries, 21 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:12:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:12:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.7ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:13:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (1.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:13:15.008915"], ["updated_at", "2025-08-13 14:13:15.008915"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:13:15.011660"], ["updated_at", "2025-08-13 14:13:15.011660"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 32ms (Views: 0.1ms | ActiveRecord: 1.7ms (5 queries, 0 cached) | GC: 11.8ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:13:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 33ms (Views: 0.4ms | ActiveRecord: 1.2ms (33 queries, 22 cached) | GC: 3.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:13:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 26ms (Views: 0.3ms | ActiveRecord: 0.9ms (26 queries, 19 cached) | GC: 1.7ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"Mortgage", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"Mortgage", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:21:20.565461"], ["updated_at", "2025-08-13 14:21:20.565461"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "Mortgage"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:21:20.566813"], ["updated_at", "2025-08-13 14:21:20.566813"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "Mortgage"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 40ms (Views: 0.1ms | ActiveRecord: 2.7ms (5 queries, 0 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 34ms (Views: 0.4ms | ActiveRecord: 1.3ms (34 queries, 23 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 347ms (Views: 0.7ms | ActiveRecord: 11.9ms (34 queries, 23 cached) | GC: 4.7ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.7ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:21:53.681774"], ["updated_at", "2025-08-13 14:21:53.681774"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (1.0ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:21:53.683525"], ["updated_at", "2025-08-13 14:21:53.683525"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 2.7ms (5 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:21:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 52ms (Views: 0.4ms | ActiveRecord: 2.3ms (35 queries, 24 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:23:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.7ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 227ms (Views: 0.6ms | ActiveRecord: 7.7ms (35 queries, 24 cached) | GC: 4.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:23:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.5ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:23:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:23:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:23:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 42ms (Views: 0.4ms | ActiveRecord: 1.6ms (35 queries, 24 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:24:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:24:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 44ms (Views: 0.4ms | ActiveRecord: 1.6ms (35 queries, 24 cached) | GC: 3.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:24:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 32ms (Views: 0.4ms | ActiveRecord: 0.9ms (28 queries, 21 cached) | GC: 2.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:25:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:25:43.459828"], ["updated_at", "2025-08-13 14:25:43.459828"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:25:43.461295"], ["updated_at", "2025-08-13 14:25:43.461295"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.8ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 42ms (Views: 0.1ms | ActiveRecord: 4.0ms (5 queries, 0 cached) | GC: 2.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:25:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 39ms (Views: 0.5ms | ActiveRecord: 1.3ms (36 queries, 25 cached) | GC: 0.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:28:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 117ms (Views: 0.8ms | ActiveRecord: 5.7ms (36 queries, 25 cached) | GC: 3.8ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:28:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 30ms (Views: 0.4ms | ActiveRecord: 1.0ms (29 queries, 22 cached) | GC: 0.9ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:28:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.6ms (2 queries, 0 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:28:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 57ms (Views: 0.6ms | ActiveRecord: 1.7ms (36 queries, 25 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:30:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 125ms (Views: 0.5ms | ActiveRecord: 4.2ms (9 queries, 1 cached) | GC: 10.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:30:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:30:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 11ms (Views: 0.5ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:31:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.4ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:31:13.559265"], ["updated_at", "2025-08-13 14:31:13.559265"], ["budget_category_id", 4], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-13 14:31:13.561045"], ["updated_at", "2025-08-13 14:31:13.561045"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-15"], ["memo", "August 15 Loan Repayment"]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
Completed 200 OK in 24ms (Views: 0.1ms | ActiveRecord: 2.1ms (9 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:31:13 -0700
Started POST "/graphql" for ::1 at 2025-08-13 07:31:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Processing by GraphqlController#execute as */*
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mAccount Load (0.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.1ms | ActiveRecord: 0.4ms (4 queries, 0 cached) | GC: 0.6ms)


  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.4ms | ActiveRecord: 1.7ms (9 queries, 1 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:31:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 16ms (Views: 0.4ms | ActiveRecord: 0.5ms (5 queries, 1 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:33:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 71ms (Views: 0.5ms | ActiveRecord: 9.5ms (9 queries, 1 cached) | GC: 7.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:33:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:33:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.5ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:33:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"4", "memo"=>"August 15 Loan Repayment", "amount"=>500, "occurredOn"=>"2025-08-15"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 4]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
Completed 200 OK in 12ms (Views: 0.1ms | ActiveRecord: 1.1ms (8 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:33:49 -0700
Started POST "/graphql" for ::1 at 2025-08-13 07:33:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.6ms (5 queries, 0 cached) | GC: 0.5ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 16ms (Views: 0.4ms | ActiveRecord: 0.5ms (5 queries, 1 cached) | GC: 0.9ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (3.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 119ms (Views: 0.5ms | ActiveRecord: 9.9ms (9 queries, 1 cached) | GC: 59.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 17ms (Views: 0.3ms | ActiveRecord: 0.5ms (5 queries, 1 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 8ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.9ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 37ms (Views: 0.8ms | ActiveRecord: 1.7ms (9 queries, 1 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 15ms (Views: 0.4ms | ActiveRecord: 0.5ms (5 queries, 1 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:34:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:35:02 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (4 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:35:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:45:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Entertainment", "amount"=>250, "description"=>"Restaurants, movies, and anything that is fun", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Entertainment", "amount"=>250, "description"=>"Restaurants, movies, and anything that is fun", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (2.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Entertainment"], ["amount", 250.0], ["description", "Restaurants, movies, and anything that is fun"], ["created_at", "2025-08-13 14:45:05.003142"], ["updated_at", "2025-08-13 14:45:05.003142"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 30ms (Views: 0.1ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:45:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 07:56:05 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 65ms (Views: 0.5ms | ActiveRecord: 3.1ms (9 queries, 1 cached) | GC: 2.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 08:05:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 34ms (Views: 0.4ms | ActiveRecord: 3.2ms (9 queries, 1 cached) | GC: 0.9ms)


Started POST "/graphql" for ::1 at 2025-08-13 08:09:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (1.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 105ms (Views: 1.7ms | ActiveRecord: 4.5ms (9 queries, 1 cached) | GC: 3.7ms)


Started POST "/graphql" for ::1 at 2025-08-13 08:25:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (2.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 45ms (Views: 0.4ms | ActiveRecord: 3.4ms (9 queries, 1 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-13 10:42:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (7.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.9ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 136ms (Views: 1.6ms | ActiveRecord: 11.7ms (9 queries, 1 cached) | GC: 9.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 11:00:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.4ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.9ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 50ms (Views: 0.5ms | ActiveRecord: 5.3ms (9 queries, 1 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:05:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 56ms (Views: 0.9ms | ActiveRecord: 5.4ms (9 queries, 1 cached) | GC: 1.6ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:09:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.6ms | ActiveRecord: 1.5ms (9 queries, 1 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:15:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 41ms (Views: 0.7ms | ActiveRecord: 1.4ms (9 queries, 1 cached) | GC: 1.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:21:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 33ms (Views: 0.7ms | ActiveRecord: 2.6ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:22:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 1.0ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:24:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.4ms | ActiveRecord: 1.4ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:25:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.3ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:26:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 1.1ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:28:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.4ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:28:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 1.0ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:29:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 25ms (Views: 0.6ms | ActiveRecord: 0.8ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:33:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:35:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.8ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 30ms (Views: 0.4ms | ActiveRecord: 1.8ms (9 queries, 1 cached) | GC: 2.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:35:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.1ms (9 queries, 1 cached) | GC: 1.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:37:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.6ms | ActiveRecord: 1.5ms (9 queries, 1 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-13 12:38:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 25ms (Views: 0.6ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 13:33:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (4.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (1.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 47ms (Views: 0.4ms | ActiveRecord: 7.3ms (9 queries, 1 cached) | GC: 1.5ms)


Started POST "/graphql" for ::1 at 2025-08-13 14:02:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 34ms (Views: 0.7ms | ActiveRecord: 1.9ms (9 queries, 1 cached) | GC: 1.4ms)


Started POST "/graphql" for ::1 at 2025-08-13 14:03:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.7ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-13 14:08:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 29ms (Views: 0.6ms | ActiveRecord: 1.5ms (9 queries, 1 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-13 14:55:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (5.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 113ms (Views: 2.2ms | ActiveRecord: 9.0ms (9 queries, 1 cached) | GC: 3.3ms)


Started POST "/graphql" for ::1 at 2025-08-13 15:23:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 35ms (Views: 0.4ms | ActiveRecord: 3.1ms (9 queries, 1 cached) | GC: 0.1ms)


Started POST "/graphql" for ::1 at 2025-08-13 15:25:05 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.6ms | ActiveRecord: 0.9ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 15:31:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (1.7ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 41ms (Views: 0.5ms | ActiveRecord: 3.5ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 15:33:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 1.0ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 17:45:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (5.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (1.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.9ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 156ms (Views: 3.8ms | ActiveRecord: 10.5ms (9 queries, 1 cached) | GC: 9.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 17:49:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.4ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-13 17:50:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.4ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-13 17:51:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 27ms (Views: 0.4ms | ActiveRecord: 1.5ms (9 queries, 1 cached) | GC: 0.9ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:39:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (15.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (2.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (1.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (1.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 143ms (Views: 2.3ms | ActiveRecord: 21.7ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:39:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.8ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.8ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (1.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 123ms (Views: 1.9ms | ActiveRecord: 4.8ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:41:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 37ms (Views: 0.4ms | ActiveRecord: 1.6ms (9 queries, 1 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:45:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.7ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 42ms (Views: 0.6ms | ActiveRecord: 2.0ms (9 queries, 1 cached) | GC: 3.5ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:45:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.8ms | ActiveRecord: 1.3ms (9 queries, 1 cached) | GC: 1.3ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:46:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.5ms | ActiveRecord: 1.2ms (9 queries, 1 cached) | GC: 0.7ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:46:44 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 30ms (Views: 0.4ms | ActiveRecord: 1.4ms (9 queries, 1 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:47:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 0.8ms (9 queries, 1 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:49:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.1ms (9 queries, 1 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:50:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 1.1ms | ActiveRecord: 1.0ms (9 queries, 1 cached) | GC: 1.1ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:57:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (3.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (3.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 37ms (Views: 0.8ms | ActiveRecord: 7.7ms (9 queries, 1 cached) | GC: 1.5ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:58:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 1.1ms (9 queries, 1 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-14 08:58:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.4ms | ActiveRecord: 1.4ms (9 queries, 1 cached) | GC: 1.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 09:00:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 1.0ms (9 queries, 1 cached) | GC: 0.8ms)


Started POST "/graphql" for ::1 at 2025-08-14 09:01:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (3.8ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 30ms (Views: 0.5ms | ActiveRecord: 4.9ms (9 queries, 1 cached) | GC: 3.6ms)


Started POST "/graphql" for ::1 at 2025-08-14 09:05:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 25ms (Views: 0.4ms | ActiveRecord: 1.1ms (9 queries, 1 cached) | GC: 2.5ms)


  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to CreateUsers (20250814171252)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.4ms)[0m  [1m[35mCREATE TABLE "users" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "email" varchar, "password_digest" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_users_on_email" ON "users" ("email")[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250814171252') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-14 10:49:52 -0700
  
NoMethodError (undefined method `protect_from_forgery' for GraphqlController:Class):
  
app/controllers/graphql_controller.rb:4:in `<class:GraphqlController>'
app/controllers/graphql_controller.rb:3:in `<main>'
Started POST "/graphql" for ::1 at 2025-08-14 10:50:02 -0700
  
NoMethodError (undefined method `protect_from_forgery' for GraphqlController:Class):
  
app/controllers/graphql_controller.rb:4:in `<class:GraphqlController>'
app/controllers/graphql_controller.rb:3:in `<main>'
Started POST "/graphql" for ::1 at 2025-08-14 10:53:35 -0700
  
SyntaxError (/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:50: syntax error, unexpected `end'):
  
app/controllers/graphql_controller.rb:50: syntax error, unexpected `end'
Started POST "/graphql" for ::1 at 2025-08-14 10:53:58 -0700
  
SyntaxError (/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:48: syntax error, unexpected `end'):
  
app/controllers/graphql_controller.rb:48: syntax error, unexpected `end'
Started POST "/graphql" for ::1 at 2025-08-14 10:55:28 -0700
  
SyntaxError (/Users/nate/code/budget-tracker/server/app/controllers/graphql_controller.rb:48: syntax error, unexpected `end'):
  
app/controllers/graphql_controller.rb:48: syntax error, unexpected `end'
Started POST "/graphql" for ::1 at 2025-08-14 10:56:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack (3.2.0) lib/rack/tempfile_reaper.rb:20:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/http/permissions_policy.rb:38:in `call'
actionpack (8.0.2) lib/action_dispatch/http/content_security_policy.rb:38:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/method_override.rb:28:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 10:56:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack (3.2.0) lib/rack/tempfile_reaper.rb:20:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/http/permissions_policy.rb:38:in `call'
actionpack (8.0.2) lib/action_dispatch/http/content_security_policy.rb:38:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/method_override.rb:28:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 10:57:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack (3.2.0) lib/rack/tempfile_reaper.rb:20:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/http/permissions_policy.rb:38:in `call'
actionpack (8.0.2) lib/action_dispatch/http/content_security_policy.rb:38:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/method_override.rb:28:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 11:03:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack (3.2.0) lib/rack/tempfile_reaper.rb:20:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/http/permissions_policy.rb:38:in `call'
actionpack (8.0.2) lib/action_dispatch/http/content_security_policy.rb:38:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/method_override.rb:28:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 11:06:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack (3.2.0) lib/rack/tempfile_reaper.rb:20:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/http/permissions_policy.rb:38:in `call'
actionpack (8.0.2) lib/action_dispatch/http/content_security_policy.rb:38:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/method_override.rb:28:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 11:09:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 11:12:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started GET "/auth/csrf" for ::1 at 2025-08-14 11:13:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-14 11:16:08 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 11:16:08 -0700
Processing by GraphqlController#execute as */*
Processing by CsrfController#show as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Completed 200 OK in 88ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 9.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 11:16:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 11:16:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
Completed 500 Internal Server Error in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
SyntaxError (/Users/nate/code/budget-tracker/server/app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
  validates :password, length: { minimum: ...
            ^
):
  
app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
app/controllers/application_controller.rb:10:in `current_user'
app/controllers/auth_controller.rb:28:in `me'
Started GET "/auth/me" for ::1 at 2025-08-14 11:16:08 -0700
Processing by AuthController#me as */*
Completed 500 Internal Server Error in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
SyntaxError (/Users/nate/code/budget-tracker/server/app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
  validates :password, length: { minimum: ...
            ^
):
  
app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
app/controllers/application_controller.rb:10:in `current_user'
app/controllers/auth_controller.rb:28:in `me'
Started GET "/auth/csrf" for ::1 at 2025-08-14 11:16:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 11:16:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 11:16:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 11:17:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/auth/register" for ::1 at 2025-08-14 11:17:58 -0700
Processing by AuthController#register as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}}
Completed 500 Internal Server Error in 11ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
SyntaxError (/Users/nate/code/budget-tracker/server/app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
  validates :password, length: { minimum: ...
            ^
):
  
app/models/user.rb:6: syntax error, unexpected symbol literal, expecting `do' or '{' or '('
app/controllers/auth_controller.rb:3:in `register'
Started POST "/auth/register" for ::1 at 2025-08-14 11:20:08 -0700
Processing by AuthController#register as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}}
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mUser Exists? (0.7ms)[0m  [1m[34mSELECT 1 AS one FROM "users" WHERE LOWER("users"."email") = LOWER(?) LIMIT ?[0m  [["email", "[FILTERED]"], ["LIMIT", 1]]
  [1m[36mUser Create (0.5ms)[0m  [1m[32mINSERT INTO "users" ("email", "password_digest", "created_at", "updated_at") VALUES (?, ?, ?, ?) RETURNING "id"[0m  [["email", "[FILTERED]"], ["password_digest", "[FILTERED]"], ["created_at", "2025-08-14 18:20:09.172979"], ["updated_at", "2025-08-14 18:20:09.172979"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 281ms (Views: 0.2ms | ActiveRecord: 9.8ms (2 queries, 0 cached) | GC: 3.5ms)


Started POST "/graphql" for ::1 at 2025-08-14 11:20:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started DELETE "/auth/logout" for ::1 at 2025-08-14 11:20:23 -0700
Processing by AuthController#logout as */*
  Parameters: {"auth"=>{}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/auth/login" for ::1 at 2025-08-14 11:20:34 -0700
Processing by AuthController#login as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?[0m  [["email", "[FILTERED]"], ["LIMIT", 1]]
Completed 200 OK in 248ms (Views: 1.0ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-14 11:20:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToAccounts (20250814185255)
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToAccounts (20250814185255)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.7ms)[0m  [1m[35mALTER TABLE "accounts" ADD "user_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mAccount Update All (0.2ms)[0m  [1m[33mUPDATE "accounts" SET "user_id" = ? WHERE "accounts"."user" IS NULL[0m  [["user_id", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToAccounts (20250814185255)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mALTER TABLE "accounts" ADD "user_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mAccount Update All (0.3ms)[0m  [1m[33mUPDATE "accounts" SET "user_id" = ? WHERE "accounts"."user" IS NULL[0m  [["user_id", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToAccounts (20250814185255)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.6ms)[0m  [1m[35mALTER TABLE "accounts" ADD "user_id" integer[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250814185255') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mAccount Update All (1.2ms)[0m  [1m[33mUPDATE "accounts" SET "user_id" = ? WHERE "accounts"."user_id" IS NULL[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Started POST "/graphql" for ::1 at 2025-08-14 12:00:12 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:00:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:00:12 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:00:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.8ms (1 query, 0 cached) | GC: 2.2ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:00:12 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:00:12 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.9ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.8ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUniqueMonthlyBudgetPerUser (20250814190122)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE UNIQUE INDEX "tidx_aaccounts_one_monthly_budget_per_user" ON "aaccounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250814190122') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started POST "/graphql" for ::1 at 2025-08-14 12:08:18 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:08:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:08:18 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:08:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 16ms (Views: 0.1ms | ActiveRecord: 1.2ms (1 query, 0 cached) | GC: 0.7ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:08:18 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:08:18 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 12:08:27 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:08:27 -0700
  
ActionController::RoutingError (No route matches [GET] "/auth/csrf"):
  
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:08:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:08:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 59ms (Views: 0.1ms | ActiveRecord: 11.5ms (1 query, 0 cached) | GC: 2.9ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:08:27 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:08:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 12:10:12 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:10:12 -0700
  
ActionController::RoutingError (No route matches [GET] "/auth/csrf"):
  
Started GET "/auth/me" for ::1 at 2025-08-14 12:10:12 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:10:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
Completed 200 OK in 35ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.1ms)


  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 66ms (Views: 0.1ms | ActiveRecord: 10.3ms (1 query, 0 cached) | GC: 3.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:10:12 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:10:12 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
  [1m[36mAccount Load (4.7ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started POST "/graphql" for ::1 at 2025-08-14 12:13:13 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:13 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:13:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 1.5ms (1 query, 0 cached) | GC: 1.7ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:13:13 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:13:13 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started POST "/graphql" for ::1 at 2025-08-14 12:13:31 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:31 -0700
  
ActionController::RoutingError (No route matches [GET] "/auth/csrf"):
  
Started GET "/auth/me" for ::1 at 2025-08-14 12:13:31 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 64ms (Views: 0.3ms | ActiveRecord: 11.6ms (1 query, 0 cached) | GC: 3.8ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:13:31 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:13:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:13:39 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Processing by CsrfController#show as */*
Completed 422 Unprocessable Content in 1ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Started GET "/auth/me" for ::1 at 2025-08-14 12:13:39 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:13:39 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:13:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:13:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Can't verify CSRF token authenticity.
Completed 422 Unprocessable Content in 0ms (ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  
ActionController::InvalidAuthenticityToken (Can't verify CSRF token authenticity.):
  
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:314:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:408:in `handle_unverified_request'
actionpack (8.0.2) lib/action_controller/metal/request_forgery_protection.rb:397:in `verify_authenticity_token'
activesupport (8.0.2) lib/active_support/callbacks.rb:361:in `block in make_lambda'
activesupport (8.0.2) lib/active_support/callbacks.rb:178:in `block in call'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:34:in `block (2 levels) in <module:Callbacks>'
activesupport (8.0.2) lib/active_support/callbacks.rb:179:in `call'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `block in invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `each'
activesupport (8.0.2) lib/active_support/callbacks.rb:559:in `invoke_before'
activesupport (8.0.2) lib/active_support/callbacks.rb:108:in `run_callbacks'
actionpack (8.0.2) lib/abstract_controller/callbacks.rb:260:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/rescue.rb:27:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:76:in `block in process_action'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `block in instrument'
activesupport (8.0.2) lib/active_support/notifications/instrumenter.rb:58:in `instrument'
activesupport (8.0.2) lib/active_support/notifications.rb:210:in `instrument'
actionpack (8.0.2) lib/action_controller/metal/instrumentation.rb:75:in `process_action'
actionpack (8.0.2) lib/action_controller/metal/params_wrapper.rb:259:in `process_action'
activerecord (8.0.2) lib/active_record/railties/controller_runtime.rb:39:in `process_action'
actionpack (8.0.2) lib/abstract_controller/base.rb:163:in `process'
actionpack (8.0.2) lib/action_controller/metal.rb:252:in `dispatch'
actionpack (8.0.2) lib/action_controller/metal.rb:335:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:67:in `dispatch'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:50:in `serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:53:in `block in serve'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:133:in `block in find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `each'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:126:in `find_routes'
actionpack (8.0.2) lib/action_dispatch/journey/router.rb:34:in `serve'
actionpack (8.0.2) lib/action_dispatch/routing/route_set.rb:908:in `call'
railties (8.0.2) lib/rails/engine/lazy_route_set.rb:68:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack-attack (6.7.0) lib/rack/attack.rb:127:in `call'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:274:in `context'
rack-session (2.1.1) lib/rack/session/abstract/id.rb:268:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/cookies.rb:706:in `call'
rack (3.2.0) lib/rack/etag.rb:29:in `call'
rack (3.2.0) lib/rack/conditional_get.rb:44:in `call'
rack (3.2.0) lib/rack/head.rb:15:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:31:in `block in call'
activesupport (8.0.2) lib/active_support/callbacks.rb:100:in `run_callbacks'
actionpack (8.0.2) lib/action_dispatch/middleware/callbacks.rb:30:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/actionable_exceptions.rb:18:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/debug_exceptions.rb:31:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/show_exceptions.rb:32:in `call'
railties (8.0.2) lib/rails/rack/logger.rb:41:in `call_app'
railties (8.0.2) lib/rails/rack/logger.rb:29:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/remote_ip.rb:96:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/request_id.rb:34:in `call'
rack (3.2.0) lib/rack/runtime.rb:24:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:61:in `block in call'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:26:in `collect_events'
actionpack (8.0.2) lib/action_dispatch/middleware/server_timing.rb:60:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/executor.rb:16:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/static.rb:27:in `call'
rack (3.2.0) lib/rack/sendfile.rb:114:in `call'
actionpack (8.0.2) lib/action_dispatch/middleware/host_authorization.rb:143:in `call'
rack-cors (3.0.0) lib/rack/cors.rb:102:in `call'
railties (8.0.2) lib/rails/engine.rb:535:in `call'
puma (6.6.1) lib/puma/configuration.rb:279:in `call'
puma (6.6.1) lib/puma/request.rb:99:in `block in handle_request'
puma (6.6.1) lib/puma/thread_pool.rb:390:in `with_force_shutdown'
puma (6.6.1) lib/puma/request.rb:98:in `handle_request'
puma (6.6.1) lib/puma/server.rb:472:in `process_client'
puma (6.6.1) lib/puma/server.rb:254:in `block in run'
puma (6.6.1) lib/puma/thread_pool.rb:167:in `block in spawn_thread'
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:14:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 1.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:14:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.3ms | ActiveRecord: 0.5ms (1 query, 0 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:14:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 265ms (Views: 0.5ms | ActiveRecord: 2.5ms (11 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:14:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:14:18 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:14:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Processing by AuthController#me as */*
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.7ms (1 query, 0 cached) | GC: 0.6ms)


  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Started GET "/auth/me" for ::1 at 2025-08-14 12:14:18 -0700
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 49ms (Views: 0.4ms | ActiveRecord: 1.9ms (11 queries, 1 cached) | GC: 2.7ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:04 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:04 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:04 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:04 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.5ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.4ms | ActiveRecord: 1.8ms (11 queries, 1 cached) | GC: 1.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:05 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.7ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:05 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:05 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.4ms | ActiveRecord: 1.1ms (11 queries, 1 cached) | GC: 1.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:07 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:07 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:07 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:07 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 39ms (Views: 0.7ms | ActiveRecord: 1.5ms (11 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:08 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 27ms (Views: 0.4ms | ActiveRecord: 1.5ms (11 queries, 1 cached) | GC: 1.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:09 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:09 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 0.9ms (11 queries, 1 cached) | GC: 1.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:11 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:11 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 25ms (Views: 0.4ms | ActiveRecord: 1.1ms (11 queries, 1 cached) | GC: 1.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:12 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:12 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:12 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 1.1ms (11 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:37 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:37 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:37 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:37 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:37 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.1ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.4ms | ActiveRecord: 0.9ms (11 queries, 1 cached) | GC: 1.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:15:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:15:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:15:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Fetching accounts for user: 1
  [1m[36mAccount Count (0.2ms)[0m  [1m[34mSELECT COUNT(*) FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
Found 3 accounts: ["Monthly Budget", "Nathen LOC", "House Mortgage LOC"]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 39ms (Views: 0.4ms | ActiveRecord: 1.9ms (11 queries, 1 cached) | GC: 1.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:19:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:19:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 61ms (Views: 0.3ms | ActiveRecord: 3.5ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:19:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:19:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:29:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:29:58 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:29:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:29:58 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (1.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.6ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:29:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.5ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:29:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 37ms (Views: 0.7ms | ActiveRecord: 2.1ms (10 queries, 1 cached) | GC: 1.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:40:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:40:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (2.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 20ms (Views: 0.4ms | ActiveRecord: 3.4ms (6 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:40:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:40:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.4ms)


  [1m[36mAccount Load (8.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.8ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?, ?)[0m  [["id", 1], ["id", 3], ["id", 2], ["id", 4]]
  [1m[36mTransaction Update All (0.5ms)[0m  [1m[33mUPDATE "transactions" SET "account_id" = ? WHERE "transactions"."account_id" = ?[0m  [["account_id", nil], ["account_id", 1]]
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[35m (4.2ms)[0m  [1m[35mDROP TABLE IF EXISTS "accounts"[0m
  [1m[35m (1.8ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL)[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35m (0.0ms)[0m  [1m[35mDROP TABLE IF EXISTS "transactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "users"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "users" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "email" varchar, "password_digest" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_users_on_email" ON "users" ("email")[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.5ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (1.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE UNIQUE INDEX "tidx_aaccounts_one_monthly_budget_per_user" ON "aaccounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.7ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.6ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.6ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.3ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.3ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY)[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES (20250814190122)[0m
  [1m[35m (0.2ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES
(20250814185255),
(20250814171252),
(20250812195906),
(20250812193104),
(20250812175524),
(20250812175059),
(20250812162748),
(20250811232433),
(20250811225434),
(20250811223716),
(20250811202250),
(20250811201517),
(20250811163108);[0m
  [1m[35m (0.8ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.2ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('environment', 'development', '2025-08-14 19:46:20.490254', '2025-08-14 19:46:20.490276') RETURNING "key"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "schema_sha1"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.4ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('schema_sha1', '85cc00486df444c92dca5ee851554d58c4f77a4c', '2025-08-14 19:46:20.491922', '2025-08-14 19:46:20.491925') RETURNING "key"[0m
  [1m[35m (1.3ms)[0m  [1m[35mDROP TABLE IF EXISTS "accounts"[0m
  [1m[35m (0.6ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE IF EXISTS "users"[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "users" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "email" varchar, "password_digest" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_users_on_email" ON "users" ("email")[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE TEMPORARY TABLE "aaccounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_aaccounts_on_user_id" ON "aaccounts" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE UNIQUE INDEX "tidx_aaccounts_one_monthly_budget_per_user" ON "aaccounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "aaccounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "accounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "accounts" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "account_type" varchar NOT NULL, "starting_balance_cents" integer DEFAULT 0 NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "fk_rails_b1e30bebc8"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE UNIQUE INDEX "idx_accounts_one_monthly_budget_per_user" ON "accounts" ("user_id") WHERE account_type = 'monthly_budget'[0m
  [1m[35m (0.4ms)[0m  [1m[35mCREATE INDEX "index_accounts_on_user_id" ON "accounts" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "accounts" ("id","name","account_type","starting_balance_cents","created_at","updated_at","user_id")
                     SELECT "id","name","account_type","starting_balance_cents","created_at","updated_at","user_id" FROM "aaccounts"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "aaccounts"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (1.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.1ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.2ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
)[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.5ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.2ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.2ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "atransactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar)[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_occurred_on" ON "atransactions" ("occurred_on")[0m
  [1m[35m (2.3ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_budget_category_id" ON "atransactions" ("budget_category_id")[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "tindex_atransactions_on_account_id" ON "atransactions" ("account_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "atransactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "transactions"[0m
  [1m[35m (0.4ms)[0m  [1m[35mDROP TABLE "transactions"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "transactions" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "budget_category_id" integer, "account_id" integer NOT NULL, "amount_cents" integer NOT NULL, "occurred_on" date NOT NULL, "memo" varchar, CONSTRAINT "fk_rails_01f020e267"
FOREIGN KEY ("account_id")
  REFERENCES "accounts" ("id")
, CONSTRAINT "fk_rails_3149034a54"
FOREIGN KEY ("budget_category_id")
  REFERENCES "budget_categories" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_account_id" ON "transactions" ("account_id")[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_budget_category_id" ON "transactions" ("budget_category_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_transactions_on_occurred_on" ON "transactions" ("occurred_on")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo")
                     SELECT "id","created_at","updated_at","budget_category_id","account_id","amount_cents","occurred_on","memo" FROM "atransactions"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "atransactions"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "schema_migrations" ("version" varchar NOT NULL PRIMARY KEY)[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[35m (0.5ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES (20250814190122)[0m
  [1m[35m (0.3ms)[0m  [1m[32mINSERT INTO "schema_migrations" (version) VALUES
(20250814185255),
(20250814171252),
(20250812195906),
(20250812193104),
(20250812175524),
(20250812175059),
(20250812162748),
(20250811232433),
(20250811225434),
(20250811223716),
(20250811202250),
(20250811201517),
(20250811163108);[0m
  [1m[35m (0.3ms)[0m  [1m[35mCREATE TABLE "ar_internal_metadata" ("key" varchar NOT NULL PRIMARY KEY, "value" varchar, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL)[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.2ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('environment', 'development', '2025-08-14 19:46:20.581877', '2025-08-14 19:46:20.581880') RETURNING "key"[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::InternalMetadata Update (0.1ms)[0m  [1m[33mUPDATE "ar_internal_metadata" SET "value" = 'test', "updated_at" = '2025-08-14 19:46:20.583163' WHERE "ar_internal_metadata"."key" = 'environment'[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.1ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "schema_sha1"]]
  [1m[36mActiveRecord::InternalMetadata Create (0.1ms)[0m  [1m[32mINSERT INTO "ar_internal_metadata" ("key", "value", "created_at", "updated_at") VALUES ('schema_sha1', '85cc00486df444c92dca5ee851554d58c4f77a4c', '2025-08-14 19:46:20.583867', '2025-08-14 19:46:20.583868') RETURNING "key"[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:46:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:46:26 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:46:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.6ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:46:26 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (3.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 401 Unauthorized in 11ms (Views: 0.3ms | ActiveRecord: 3.8ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:46:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:46:26 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 401 Unauthorized in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 37ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/auth/login" for ::1 at 2025-08-14 12:46:33 -0700
Processing by AuthController#login as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?[0m  [["email", "[FILTERED]"], ["LIMIT", 1]]
Completed 422 Unprocessable Content in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/auth/register" for ::1 at 2025-08-14 12:46:44 -0700
Processing by AuthController#register as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}}
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mUser Exists? (1.0ms)[0m  [1m[34mSELECT 1 AS one FROM "users" WHERE LOWER("users"."email") = LOWER(?) LIMIT ?[0m  [["email", "[FILTERED]"], ["LIMIT", 1]]
  [1m[36mUser Create (0.8ms)[0m  [1m[32mINSERT INTO "users" ("email", "password_digest", "created_at", "updated_at") VALUES (?, ?, ?, ?) RETURNING "id"[0m  [["email", "[FILTERED]"], ["password_digest", "[FILTERED]"], ["created_at", "2025-08-14 19:46:45.526622"], ["updated_at", "2025-08-14 19:46:45.526622"]]
  [1m[36mTRANSACTION (1.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 336ms (Views: 0.3ms | ActiveRecord: 3.0ms (2 queries, 0 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:46:45 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:46:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.4ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:47:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:47:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"cash", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"cash", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
'cash' is not a valid account_type
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/enum.rb:206:in `assert_valid_value'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute.rb:79:in `with_value_from_user'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_set.rb:60:in `write_from_user'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_methods/write.rb:42:in `_write_attribute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_methods.rb:273:in `account_type='
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_assignment.rb:69:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_assignment.rb:69:in `_assign_attribute'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_assignment.rb:17:in `block in _assign_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_assignment.rb:9:in `each'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_assignment.rb:9:in `_assign_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_assignment.rb:34:in `assign_attributes'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/api.rb:81:in `initialize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/core.rb:478:in `initialize'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:76:in `new'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/inheritance.rb:76:in `new'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/create_account.rb:13:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 10ms (Views: 0.4ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.3ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Exists? (2.3ms)[0m  [1m[34mSELECT 1 AS one FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."account_type" = ? AND "accounts"."id" IS NOT NULL LIMIT ?[0m  [["user_id", 1], ["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mAccount Create (0.7ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Checking Account"], ["account_type", "monthly_budget"], ["starting_balance_cents", 900000], ["created_at", "2025-08-14 19:48:01.694735"], ["updated_at", "2025-08-14 19:48:01.694735"], ["user_id", 1]]
  [1m[36mTRANSACTION (2.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 26ms (Views: 0.2ms | ActiveRecord: 5.5ms (4 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 17ms (Views: 0.4ms | ActiveRecord: 1.3ms (5 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Checking Account", "accountType"=>"monthly_budget", "startingBalance"=>9000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Exists? (0.5ms)[0m  [1m[34mSELECT 1 AS one FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."account_type" = ? AND "accounts"."id" IS NOT NULL LIMIT ?[0m  [["user_id", 1], ["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
Completed 200 OK in 20ms (Views: 0.4ms | ActiveRecord: 0.7ms (2 queries, 0 cached) | GC: 1.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:15 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:48:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:15 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:48:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.6ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 1.1ms (5 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:17 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.8ms (5 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:48:17 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.9ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:48:17 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:50:36 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:36 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:50:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:50:36 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 18ms (Views: 0.3ms | ActiveRecord: 0.7ms (5 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.6ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:50:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.8ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.4ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:50:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:50:39 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:50:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 21ms (Views: 0.3ms | ActiveRecord: 1.4ms (5 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:51:55 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:51:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:51:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:51:56 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.8ms)


Processing by CsrfController#show as */*
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:51:56 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:51:56 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 1.4ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 0.8ms (5 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:54:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:54:13 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 12:54:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:54:13 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:54:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
Started POST "/graphql" for ::1 at 2025-08-14 12:54:13 -0700
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.7ms (5 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:55:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:55:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:55:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 12:55:10 -0700
Started POST "/graphql" for ::1 at 2025-08-14 12:55:10 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Started GET "/auth/me" for ::1 at 2025-08-14 12:55:10 -0700
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (1.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 37ms (Views: 0.7ms | ActiveRecord: 1.9ms (5 queries, 1 cached) | GC: 0.5ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (2.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:58:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:58:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Personal Loan", "accountType"=>"loan", "startingBalance"=>12960}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Personal Loan", "accountType"=>"loan", "startingBalance"=>12960}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Create (0.5ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Personal Loan"], ["account_type", "loan"], ["starting_balance_cents", 1296000], ["created_at", "2025-08-14 19:58:00.919131"], ["updated_at", "2025-08-14 19:58:00.919131"], ["user_id", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 1.4ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:58:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:58:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?)[0m  [["account_id", 1], ["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 20ms (Views: 0.2ms | ActiveRecord: 1.2ms (7 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:58:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:58:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Shared House Line of Credit", "accountType"=>"loan", "startingBalance"=>45333}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Shared House Line of Credit", "accountType"=>"loan", "startingBalance"=>45333}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Create (1.2ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Shared House Line of Credit"], ["account_type", "loan"], ["starting_balance_cents", 4533300], ["created_at", "2025-08-14 19:58:47.529607"], ["updated_at", "2025-08-14 19:58:47.529607"], ["user_id", 1]]
  [1m[36mTRANSACTION (1.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
Completed 200 OK in 17ms (Views: 0.5ms | ActiveRecord: 2.2ms (3 queries, 0 cached) | GC: 0.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:58:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:58:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.5ms | ActiveRecord: 1.3ms (9 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:59:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:59:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 15ms (Views: 0.1ms | ActiveRecord: 0.8ms (5 queries, 0 cached) | GC: 1.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:59:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:59:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:59:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 1.2ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:59:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Loan Repayment", "amount"=>2000, "description"=>"Budget for paying back loans/line of credit", "categoryType"=>"debt_repayment"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Loan Repayment", "amount"=>2000, "description"=>"Budget for paying back loans/line of credit", "categoryType"=>"debt_repayment"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (2.4ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Loan Repayment"], ["amount", 2000.0], ["description", "Budget for paying back loans/line of credit"], ["created_at", "2025-08-14 19:59:53.331880"], ["updated_at", "2025-08-14 19:59:53.331880"], ["category_type", "debt_repayment"]]
  [1m[36mTRANSACTION (0.7ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 23ms (Views: 0.2ms | ActiveRecord: 3.4ms (2 queries, 0 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:59:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:59:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.7ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 1.7ms (5 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 12:59:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 12:59:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (2.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (4.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 1]]
Completed 200 OK in 157ms (Views: 0.9ms | ActiveRecord: 5.9ms (3 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:01:43 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:01:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"UpdateAccount", "variables"=>{"id"=>"3", "name"=>"Shared House Line of Credit", "accountType"=>"loan", "startingBalance"=>45833}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"UpdateAccount", "variables"=>{"id"=>"3", "name"=>"Shared House Line of Credit", "accountType"=>"loan", "startingBalance"=>45833}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Update (0.5ms)[0m  [1m[33mUPDATE "accounts" SET "starting_balance_cents" = ?, "updated_at" = ? WHERE "accounts"."id" = ?[0m  [["starting_balance_cents", 4583300], ["updated_at", "2025-08-14 20:01:43.103389"], ["id", 3]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
Completed 200 OK in 30ms (Views: 0.2ms | ActiveRecord: 1.6ms (6 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:01:43 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:01:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 1.0ms (5 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:06:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:06:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"1", "memo"=>"August 11 Payment One", "amount"=>500, "occurredOn"=>"2025-08-11"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"1", "memo"=>"August 11 Payment One", "amount"=>500, "occurredOn"=>"2025-08-11"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.6ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:06:11.516907"], ["updated_at", "2025-08-14 20:06:11.516907"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-11"], ["memo", "August 11 Payment One"]]
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:06:11.518642"], ["updated_at", "2025-08-14 20:06:11.518642"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 50000], ["occurred_on", "2025-08-11"], ["memo", "August 11 Payment One"]]
  [1m[36mTRANSACTION (0.5ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 26ms (Views: 0.1ms | ActiveRecord: 2.3ms (10 queries, 0 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:06:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:06:11 -0700
Started POST "/graphql" for ::1 at 2025-08-14 13:06:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:06:11 -0700
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.3ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:06:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:06:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:07:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:07:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"1", "memo"=>"August 11 Payment Two", "amount"=>1000, "occurredOn"=>"2025-08-11"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"3", "budgetCategoryId"=>"1", "memo"=>"August 11 Payment Two", "amount"=>1000, "occurredOn"=>"2025-08-11"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:07:11.567681"], ["updated_at", "2025-08-14 20:07:11.567681"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -100000], ["occurred_on", "2025-08-11"], ["memo", "August 11 Payment Two"]]
  [1m[36mTransaction Create (0.1ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:07:11.568694"], ["updated_at", "2025-08-14 20:07:11.568694"], ["budget_category_id", nil], ["account_id", 3], ["amount_cents", 100000], ["occurred_on", "2025-08-11"], ["memo", "August 11 Payment Two"]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.1ms | ActiveRecord: 1.3ms (11 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:07:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:07:11 -0700
Started POST "/graphql" for ::1 at 2025-08-14 13:07:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Processing by CsrfController#show as */*
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:07:11 -0700
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 18ms (Views: 0.1ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 1.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.6ms (5 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:08:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:08:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"UpdateAccount", "variables"=>{"id"=>"2", "name"=>"Personal Loan", "accountType"=>"loan", "startingBalance"=>13460}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"UpdateAccount", "variables"=>{"id"=>"2", "name"=>"Personal Loan", "accountType"=>"loan", "startingBalance"=>13460}, "query"=>"mutation UpdateAccount($id: ID!, $name: String, $accountType: String, $startingBalance: Float) {\n  updateAccount(\n    input: {id: $id, name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Update (0.4ms)[0m  [1m[33mUPDATE "accounts" SET "starting_balance_cents" = ?, "updated_at" = ? WHERE "accounts"."id" = ?[0m  [["starting_balance_cents", 1346000], ["updated_at", "2025-08-14 20:08:12.796588"], ["id", 2]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.8ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:08:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:08:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:08:51 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:08:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"1", "memo"=>"Personal LOC payment", "amount"=>500, "occurredOn"=>"2025-08-08"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"2", "budgetCategoryId"=>"1", "memo"=>"Personal LOC payment", "amount"=>500, "occurredOn"=>"2025-08-08"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.6ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:08:51.544649"], ["updated_at", "2025-08-14 20:08:51.544649"], ["budget_category_id", 1], ["account_id", 1], ["amount_cents", -50000], ["occurred_on", "2025-08-08"], ["memo", "Personal LOC payment"]]
  [1m[36mTransaction Create (0.2ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:08:51.546412"], ["updated_at", "2025-08-14 20:08:51.546412"], ["budget_category_id", nil], ["account_id", 2], ["amount_cents", 50000], ["occurred_on", "2025-08-08"], ["memo", "Personal LOC payment"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 14ms (Views: 0.1ms | ActiveRecord: 1.8ms (11 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:08:51 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:08:51 -0700
Started POST "/graphql" for ::1 at 2025-08-14 13:08:51 -0700
Processing by CsrfController#show as */*
Processing by GraphqlController#execute as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:08:51 -0700
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.4ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.4ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:19:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:19:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 13:19:21 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 13:19:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (3.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 3.3ms (1 query, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:19:22 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:19:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
Processing by AuthController#me as */*
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 1.2ms (1 query, 0 cached) | GC: 0.0ms)


  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 36ms (Views: 0.3ms | ActiveRecord: 3.2ms (10 queries, 1 cached) | GC: 1.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:21:33 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:21:33 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Pet food", "amount"=>200, "description"=>nil, "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Pet food", "amount"=>200, "description"=>nil, "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (1.0ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Pet food"], ["amount", 200.0], ["description", nil], ["created_at", "2025-08-14 20:21:33.064163"], ["updated_at", "2025-08-14 20:21:33.064163"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 1.6ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:22:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:22:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:22:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:22:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (3 queries, 0 cached) | GC: 1.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:23:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:23:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "memo"=>"August Pet food day", "amount"=>191.26, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"2", "memo"=>"August Pet food day", "amount"=>191.26, "occurredOn"=>"2025-08-13"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mCACHE Transaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.3ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-14 20:23:01.391418"], ["updated_at", "2025-08-14 20:23:01.391418"], ["budget_category_id", 2], ["account_id", 1], ["amount_cents", -19126], ["occurred_on", "2025-08-13"], ["memo", "August Pet food day"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 2], ["LIMIT", 1]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 1.4ms (11 queries, 2 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:23:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:23:01 -0700
Started POST "/graphql" for ::1 at 2025-08-14 13:23:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:23:01 -0700
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.5ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:03 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:27:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"2"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 2], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:03 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:03 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:27:03 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:03 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:27:03 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:27:03 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.1ms (10 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:04 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:27:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:27:04 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:27:04 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:27:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.3ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 13:28:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 1.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:28:56 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (7.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 7.8ms (1 query, 0 cached) | GC: 2.8ms)


Processing by CsrfController#show as */*
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:28:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:28:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:57 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:28:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:57 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:28:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:28:57 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:58 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:28:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:28:58 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 13:28:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:28:58 -0700
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:00 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:00 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:00 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:06 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:06 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:06 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:06 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:06 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 13:29:06 -0700
Started POST "/graphql" for ::1 at 2025-08-14 13:29:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Processing by AuthController#me as */*
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mUser Load (0.7ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.7ms (1 query, 0 cached) | GC: 0.4ms)


  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:06 -0700
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.2ms | ActiveRecord: 1.4ms (10 queries, 1 cached) | GC: 1.2ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:07 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:07 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:08 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:08 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:08 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.1ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:09 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:29:09 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:29:09 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:29:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:30:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:30:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started DELETE "/auth/logout" for ::1 at 2025-08-14 13:31:27 -0700
Processing by AuthController#logout as */*
  Parameters: {"auth"=>{}}
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/auth/login" for ::1 at 2025-08-14 13:31:34 -0700
Processing by AuthController#login as */*
  Parameters: {"email"=>"[FILTERED]", "password"=>"[FILTERED]", "auth"=>{"email"=>"[FILTERED]", "password"=>"[FILTERED]"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?[0m  [["email", "[FILTERED]"], ["LIMIT", 1]]
Completed 200 OK in 223ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:36:19 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:36:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:39:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 13:39:09 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:40:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:40:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.8ms (5 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:51:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:51:26 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:51:26 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (1.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 1.4ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:51:26 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:51:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-14 13:51:26 -0700
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.3ms | ActiveRecord: 1.4ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:53:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:53:31 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:53:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:53:31 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:53:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:53:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:57:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:57:10 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:57:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:57:10 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:57:10 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:57:10 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:59:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:59:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:59:27 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:59:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 13:59:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:59:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:59:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:59:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 13:59:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 13:59:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:00:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:00:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:00:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:00:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:00:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:00:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 18ms (Views: 0.7ms | ActiveRecord: 1.6ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:00:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:00:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:00:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 1.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:02:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:02:47 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:02:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:02:47 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:02:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:02:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:14:37 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:14:37 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:14:37 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (2.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:14:37 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:14:37 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:14:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 20ms (Views: 0.4ms | ActiveRecord: 2.5ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:24:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:24:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:24:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (1.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:24:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:24:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:24:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.3ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:25:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:25:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.5ms (5 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:25:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:25:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.2ms)


  [1m[36mAccount Load (5.4ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:46:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:25 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (3.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 8ms (Views: 0.4ms | ActiveRecord: 3.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 14:46:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:46:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (1.0ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.6ms | ActiveRecord: 2.6ms (10 queries, 1 cached) | GC: 1.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:26 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:46:26 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:46:26 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:46:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:46:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:50:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:50:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:54:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.5ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 14:54:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:54:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.6ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 27ms (Views: 0.5ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:40 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:40 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:54:40 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:54:40 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:54:40 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:54:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 17ms (Views: 0.2ms | ActiveRecord: 1.7ms (10 queries, 1 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:11 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:11 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:11 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:57:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:20 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 50ms (Views: 0.1ms | ActiveRecord: 8.6ms (1 query, 0 cached) | GC: 3.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:20 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:57:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 388ms (Views: 0.3ms | ActiveRecord: 2.1ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 14:57:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 14:57:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.8ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 14:57:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (1.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 2.1ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 15:14:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 1.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 15:14:47 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 15:14:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 15:14:47 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (3.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 3.9ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 15:14:47 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 15:14:47 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.2ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 1.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:15 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:09:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (4.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 4.4ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:09:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:09:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.7ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 27ms (Views: 0.3ms | ActiveRecord: 3.0ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:09:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:09:39 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:09:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:09:39 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 22ms (Views: 0.7ms | ActiveRecord: 2.2ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:19:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:19:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 1.5ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:22:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:22:15 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:22:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:22:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:22:15 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:22:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 30ms (Views: 0.3ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 3.4ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:13 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:25:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:25:13 -0700
Started POST "/graphql" for ::1 at 2025-08-14 17:25:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.5ms | ActiveRecord: 1.8ms (10 queries, 1 cached) | GC: 0.4ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:24 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:25:24 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:24 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:25:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:25:24 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 17ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:25:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:25:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:25:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:25:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:27:03 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:27:04 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-14 17:27:04 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.6ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:27:04 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:27:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-14 17:27:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.3ms | ActiveRecord: 1.1ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:28:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:28:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:32 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:32 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:28:32 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:28:32 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:38 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:28:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:28:38 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.4ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:55 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-14 17:28:55 -0700
Started GET "/auth/me" for ::1 at 2025-08-14 17:28:55 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-14 17:28:55 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:01:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 18ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:01:21 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:01:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 54ms (Views: 0.1ms | ActiveRecord: 9.1ms (1 query, 0 cached) | GC: 3.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:01:21 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:01:21 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:01:21 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 243ms (Views: 0.2ms | ActiveRecord: 2.0ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:01:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:01:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:02:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:02:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:23 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:05:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:23 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:05:23 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:05:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.2ms | ActiveRecord: 1.6ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.6ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:05:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.7ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:35 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:05:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:36 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:05:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
Started POST "/graphql" for ::1 at 2025-08-17 17:05:36 -0700
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 1.3ms (10 queries, 1 cached) | GC: 1.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:05:37 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:05:37 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 1.0ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:09:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:09:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.5ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:20:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:20:59 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:20:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (3.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 3.6ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:20:59 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:20:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:20:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (2.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 20ms (Views: 0.2ms | ActiveRecord: 3.6ms (10 queries, 1 cached) | GC: 2.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:22:01 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:22:01 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:22:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.6ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:20 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:22:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:20 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:22:20 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:22:20 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:22 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:22 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:22:22 -0700
Started POST "/graphql" for ::1 at 2025-08-17 17:22:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:22:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.3ms | ActiveRecord: 2.0ms (10 queries, 1 cached) | GC: 0.7ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:22:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:22:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:23:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:23:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:23:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:23:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:23:56 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:23:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 19ms (Views: 0.2ms | ActiveRecord: 1.3ms (10 queries, 1 cached) | GC: 1.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:24:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:24:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 12ms (Views: 0.3ms | ActiveRecord: 0.7ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:23 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:33:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (1.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 1.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:23 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:33:23 -0700
Processing by CsrfController#show as */*
Processing by AuthController#me as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:33:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:33:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:33:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:33:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:33:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:33:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:33:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:33:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 22ms (Views: 0.3ms | ActiveRecord: 1.5ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:34:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:34:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:34:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:34:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:34:16 -0700
Started POST "/graphql" for ::1 at 2025-08-17 17:34:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:35:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:35:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.6ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:35:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:35:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 10ms (Views: 0.3ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:35:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:35:46 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:35:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:35:46 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:35:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:35:46 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:36:06 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:36:06 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:36:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:36:53 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:36:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:36:53 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:36:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:36:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:38:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:38:31 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:38:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:38:31 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:38:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:38:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:39:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:39:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.4ms (6 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:39:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:39:59 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:39:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:39:59 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:39:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-17 17:39:59 -0700
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:40:30 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:40:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:45:09 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:45:09 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:46:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:46:46 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:46:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:46:46 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.4ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:46:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-17 17:46:46 -0700
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 19ms (Views: 0.3ms | ActiveRecord: 1.3ms (10 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:46:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:46:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.7ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:47:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:47:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:48:49 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:48:49 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-17 17:48:49 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:48:49 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:48:49 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:48:49 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.3ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:48:51 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:48:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:48:55 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:48:55 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.7ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:52:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:52:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:52:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:52:48 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:52:48 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:52:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 13ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:52:50 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:52:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:30 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:56:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:56:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"3"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 3], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:57 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 17:56:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:57 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 17:56:57 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:56:57 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:56:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:56:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 17:57:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 17:57:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:04:30 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:04:30 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:04:30 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:04:30 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (1.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 1.9ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:04:30 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.4ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:04:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:04:32 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:04:32 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:04:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:04:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:05:52 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:05:52 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:05:52 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:05:52 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:05:52 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:05:52 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:05:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:05:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.5ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:07:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:07:56 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:07:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:07:56 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:07:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:07:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.2ms | ActiveRecord: 1.1ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:07:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:07:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:07:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:07:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:08:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:08:34 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:08:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:08:35 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:08:35 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:08:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 17ms (Views: 0.2ms | ActiveRecord: 1.1ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:08:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:08:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:11:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:11:02 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:11:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:11:02 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:11:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:11:02 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.2ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:11:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:11:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.4ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:12:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:12:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:12:34 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:12:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:12:34 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:12:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 25ms (Views: 0.3ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 0.8ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:12:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:12:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:12:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:12:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:19:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:19:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:19:38 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:19:38 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (5.8ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 5.8ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:19:38 -0700
Started POST "/graphql" for ::1 at 2025-08-17 18:19:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mUser Load (2.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.8ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 31ms (Views: 0.2ms | ActiveRecord: 2.6ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:19:40 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:19:40 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:21:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:21:22 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:21:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
Started GET "/auth/csrf" for ::1 at 2025-08-17 18:21:22 -0700
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:21:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:21:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:21:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:21:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:21:45 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:21:45 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:23:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:23:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:23:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:23:12 -0700
Started POST "/graphql" for ::1 at 2025-08-17 18:23:12 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:23:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 28ms (Views: 0.3ms | ActiveRecord: 1.9ms (10 queries, 1 cached) | GC: 0.3ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:23:13 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:23:13 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:23:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:23:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 14ms (Views: 0.3ms | ActiveRecord: 0.8ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:28:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:28:22 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:28:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:28:22 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:28:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:28:22 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.4ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 16ms (Views: 0.2ms | ActiveRecord: 1.3ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:28:23 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:28:23 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 6ms (Views: 0.3ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:28:30 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:28:30 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:34:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:34:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:34:01 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 10ms (Views: 0.7ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:34:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:34:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:34:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.2ms (10 queries, 1 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:34:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:34:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:34:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:34:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:36:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:36:18 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:36:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:36:18 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:36:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:36:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 12ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:36:19 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:36:19 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:36:35 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:36:35 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:37:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:37:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:37:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.2ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:37:01 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:37:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-17 18:37:01 -0700
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 14ms (Views: 0.4ms | ActiveRecord: 0.9ms (10 queries, 1 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:37:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:37:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.6ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:38:51 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:38:51 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 10ms (Views: 0.2ms | ActiveRecord: 0.7ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:39:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:39:28 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:39:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:39:28 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:39:28 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.4ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:39:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 22ms (Views: 0.2ms | ActiveRecord: 1.6ms (10 queries, 1 cached) | GC: 0.6ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:39:29 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:39:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:39:31 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:39:31 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:44:28 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:44:28 -0700
Started POST "/graphql" for ::1 at 2025-08-17 18:44:28 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 22ms (Views: 0.3ms | ActiveRecord: 1.8ms (10 queries, 1 cached) | GC: 0.4ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:44:29 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:44:29 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.2ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:45:12 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:45:12 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:50:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:50:54 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:50:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:50:54 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (1.9ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.9ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:50:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:50:54 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 22ms (Views: 0.3ms | ActiveRecord: 1.7ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:50:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:50:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:51:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:51:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:54:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:54:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:54:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.5ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:54:46 -0700
Started POST "/graphql" for ::1 at 2025-08-17 18:54:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (14.4ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.3ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 89ms (Views: 0.2ms | ActiveRecord: 15.9ms (10 queries, 1 cached) | GC: 1.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 18:54:46 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:54:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:54:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:55:06 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:55:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:58:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:58:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:58:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:58:25 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 18:58:25 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 64ms (Views: 1.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:58:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.6ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (1.5ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (1.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 29ms (Views: 0.4ms | ActiveRecord: 3.4ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:58:26 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:58:26 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 18:58:46 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.2ms)


Started POST "/graphql" for ::1 at 2025-08-17 18:58:46 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:00:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:00:02 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 19:00:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:00:02 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:00:02 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:00:03 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.3ms | ActiveRecord: 1.6ms (10 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:00:04 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:00:04 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 10ms (Views: 0.3ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:00:53 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:00:53 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:01:17 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:01:17 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 19:01:17 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:01:17 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 19:01:17 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-17 19:01:17 -0700
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 11ms (Views: 0.2ms | ActiveRecord: 0.8ms (10 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:01:18 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:01:18 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:02:14 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:02:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 1.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:16:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:16:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:16:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:16:34 -0700
Started POST "/graphql" for ::1 at 2025-08-17 19:16:34 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (2.6ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 6ms (Views: 0.3ms | ActiveRecord: 2.6ms (1 query, 0 cached) | GC: 0.4ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:16:34 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 23ms (Views: 0.3ms | ActiveRecord: 2.1ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:24:14 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:24:14 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 19:24:14 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (1.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 3ms (Views: 0.1ms | ActiveRecord: 1.3ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:24:14 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:24:58 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:24:58 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:25:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:25:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.1ms | ActiveRecord: 0.6ms (6 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:27:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:27:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:27:54 -0700
Started GET "/auth/csrf" for ::1 at 2025-08-17 19:27:54 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Started GET "/auth/me" for ::1 at 2025-08-17 19:27:54 -0700
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:27:54 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.3ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 24ms (Views: 0.4ms | ActiveRecord: 1.8ms (10 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:27:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:27:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:39:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:39:54 -0700
Started GET "/auth/me" for ::1 at 2025-08-17 19:39:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-17 19:39:54 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (2.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-17 19:39:54 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-17 19:39:54 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.6ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.2ms | ActiveRecord: 2.0ms (10 queries, 1 cached) | GC: 1.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 04:07:16 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 04:07:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 04:07:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (2.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.1ms | ActiveRecord: 2.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 04:07:16 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 04:07:16 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 04:07:16 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.5ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 21ms (Views: 0.3ms | ActiveRecord: 2.0ms (10 queries, 1 cached) | GC: 1.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 14:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 14:44:27 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 14:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 14:44:27 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (2.5ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.5ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/me" for ::1 at 2025-08-18 14:44:27 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 14:44:27 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.9ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.4ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 26ms (Views: 0.2ms | ActiveRecord: 2.7ms (10 queries, 1 cached) | GC: 1.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:39:14 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.3ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:39:14 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (2.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2]]
Completed 200 OK in 14ms (Views: 2.1ms | ActiveRecord: 3.0ms (3 queries, 0 cached) | GC: 0.5ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:42:14 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:42:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Groceries", "amount"=>800, "description"=>"Food for humans", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Groceries", "amount"=>800, "description"=>"Food for humans", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.6ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Groceries"], ["amount", 800.0], ["description", "Food for humans"], ["created_at", "2025-08-18 23:42:15.027202"], ["updated_at", "2025-08-18 23:42:15.027202"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 11ms (Views: 0.1ms | ActiveRecord: 1.3ms (2 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:42:15 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:42:15 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:43:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:43:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Entertainment", "amount"=>200, "description"=>"Things that are not groceries, gas, or pet food.", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Entertainment", "amount"=>200, "description"=>"Things that are not groceries, gas, or pet food.", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.5ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Entertainment"], ["amount", 200.0], ["description", "Things that are not groceries, gas, or pet food."], ["created_at", "2025-08-18 23:43:00.485161"], ["updated_at", "2025-08-18 23:43:00.485161"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.8ms (2 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:43:00 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:43:00 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:43:50 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:43:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Gas", "amount"=>200, "description"=>"Gas for all vehicles", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Gas", "amount"=>200, "description"=>"Gas for all vehicles", "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.5ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Gas"], ["amount", 200.0], ["description", "Gas for all vehicles"], ["created_at", "2025-08-18 23:43:50.515338"], ["updated_at", "2025-08-18 23:43:50.515338"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.7ms (2 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:43:50 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:43:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:44:25 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:44:25 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
undefined method `user' for #<BudgetCategory id: 5, name: "Gas", amount: 0.2e3, description: "Gas for all vehicles", created_at: "2025-08-18 23:43:50.515338000 +0000", updated_at: "2025-08-18 23:43:50.515338000 +0000", category_type: "variable_expense">
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_methods.rb:512:in `method_missing'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_methods.rb:495:in `method_missing'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/delete_budget_category.rb:12:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 26ms (Views: 0.4ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:44:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:44:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
undefined method `user' for #<BudgetCategory id: 5, name: "Gas", amount: 0.2e3, description: "Gas for all vehicles", created_at: "2025-08-18 23:43:50.515338000 +0000", updated_at: "2025-08-18 23:43:50.515338000 +0000", category_type: "variable_expense">
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_methods.rb:512:in `method_missing'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_methods.rb:495:in `method_missing'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/delete_budget_category.rb:12:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 14ms (Views: 0.3ms | ActiveRecord: 0.3ms (2 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:46:24 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:46:24 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 0.5ms (6 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:01 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "memo"=>"Bought some food for friends visiting", "amount"=>67.95, "occurredOn"=>"2025-08-14"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateTransaction", "variables"=>{"input"=>{"accountId"=>"1", "budgetCategoryId"=>"3", "memo"=>"Bought some food for friends visiting", "amount"=>67.95, "occurredOn"=>"2025-08-14"}}, "query"=>"mutation CreateTransaction($input: CreateTransactionInput!) {\n  createTransaction(input: $input) {\n    transaction {\n      id\n      accountId\n      budgetCategoryId\n      memo\n      amount\n      occurredOn\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."account_type" = ? ORDER BY "accounts"."id" ASC LIMIT ?[0m  [["account_type", "monthly_budget"], ["LIMIT", 1]]
  [1m[36mCACHE Transaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mCACHE BudgetCategory Load (0.0ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Create (0.5ms)[0m  [1m[32mINSERT INTO "transactions" ("created_at", "updated_at", "budget_category_id", "account_id", "amount_cents", "occurred_on", "memo") VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["created_at", "2025-08-18 23:48:01.437298"], ["updated_at", "2025-08-18 23:48:01.437298"], ["budget_category_id", 3], ["account_id", 1], ["amount_cents", -6795], ["occurred_on", "2025-08-14"], ["memo", "Bought some food for friends visiting"]]
  [1m[36mTRANSACTION (0.2ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 3], ["LIMIT", 1]]
Completed 200 OK in 26ms (Views: 0.1ms | ActiveRecord: 1.7ms (11 queries, 2 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:01 -0700
Started POST "/graphql" for ::1 at 2025-08-18 16:48:01 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Started POST "/graphql" for ::1 at 2025-08-18 16:48:01 -0700
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.4ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?)[0m  [["id", 1], ["id", 2], ["id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 18ms (Views: 0.2ms | ActiveRecord: 1.6ms (10 queries, 1 cached) | GC: 0.6ms)


Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteTransaction", "variables"=>{"id"=>"8"}, "query"=>"mutation DeleteTransaction($id: ID!) {\n  deleteTransaction(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteTransaction", "variables"=>{"id"=>"8"}, "query"=>"mutation DeleteTransaction($id: ID!) {\n  deleteTransaction(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."id" = ? LIMIT ?[0m  [["id", 8], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?, ?)[0m  [["id", 1], ["id", 2], ["id", 3]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Destroy (0.3ms)[0m  [1m[31mDELETE FROM "transactions" WHERE "transactions"."id" = ?[0m  [["id", 8]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 1.1ms (7 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:22 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:22 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"1"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 1], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 1]]
  [1m[36mBudgetCategory Load (0.3ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.7ms (6 queries, 1 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateAccount", "variables"=>{"name"=>"Credit Card Bill", "accountType"=>"loan", "startingBalance"=>5000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateAccount", "variables"=>{"name"=>"Credit Card Bill", "accountType"=>"loan", "startingBalance"=>5000}, "query"=>"mutation CreateAccount($name: String!, $accountType: String!, $startingBalance: Float) {\n  createAccount(\n    input: {name: $name, accountType: $accountType, startingBalance: $startingBalance}\n  ) {\n    account {\n      id\n      name\n      accountType\n      startingBalance\n      currentBalance\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Create (0.7ms)[0m  [1m[32mINSERT INTO "accounts" ("name", "account_type", "starting_balance_cents", "created_at", "updated_at", "user_id") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Credit Card Bill"], ["account_type", "loan"], ["starting_balance_cents", 500000], ["created_at", "2025-08-18 23:48:48.291276"], ["updated_at", "2025-08-18 23:48:48.291276"], ["user_id", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 4]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 1.1ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:48 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:48 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3], ["account_id", 4]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 4]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.1ms (12 queries, 1 cached) | GC: 0.8ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:50 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:50 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccount", "variables"=>{"id"=>"4"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccount", "variables"=>{"id"=>"4"}, "query"=>"query GetAccount($id: ID!) {\n  account(id: $id) {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        amount\n        description\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ? AND "accounts"."id" = ? LIMIT ?[0m  [["user_id", 1], ["id", 4], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.0ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 4]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 4]]
Completed 200 OK in 6ms (Views: 0.1ms | ActiveRecord: 0.4ms (5 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:56 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:56 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteAccount", "variables"=>{"id"=>"4"}, "query"=>"mutation DeleteAccount($id: ID!) {\n  deleteAccount(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteAccount", "variables"=>{"id"=>"4"}, "query"=>"mutation DeleteAccount($id: ID!) {\n  deleteAccount(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."id" = ? LIMIT ?[0m  [["id", 4], ["LIMIT", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 4]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mAccount Destroy (0.4ms)[0m  [1m[31mDELETE FROM "accounts" WHERE "accounts"."id" = ?[0m  [["id", 4]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 7ms (Views: 0.1ms | ActiveRecord: 0.8ms (5 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:48:59 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 16:48:59 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:48:59 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 16:48:59 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 15ms (Views: 0.2ms | ActiveRecord: 1.0ms (10 queries, 1 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:50:41 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:50:41 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:51:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:51:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Car Payment", "amount"=>120, "description"=>nil, "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"CreateBudgetCategory", "variables"=>{"name"=>"Car Payment", "amount"=>120, "description"=>nil, "categoryType"=>"variable_expense"}, "query"=>"mutation CreateBudgetCategory($name: String!, $amount: Float!, $description: String, $categoryType: String) {\n  createBudgetCategory(\n    input: {name: $name, amount: $amount, description: $description, categoryType: $categoryType}\n  ) {\n    budgetCategory {\n      id\n      name\n      amount\n      description\n      categoryType\n      createdAt\n      updatedAt\n      __typename\n    }\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mBudgetCategory Create (0.4ms)[0m  [1m[32mINSERT INTO "budget_categories" ("name", "amount", "description", "created_at", "updated_at", "category_type") VALUES (?, ?, ?, ?, ?, ?) RETURNING "id"[0m  [["name", "Car Payment"], ["amount", 120.0], ["description", nil], ["created_at", "2025-08-18 23:51:39.517611"], ["updated_at", "2025-08-18 23:51:39.517611"], ["category_type", "variable_expense"]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 5ms (Views: 0.1ms | ActiveRecord: 0.6ms (2 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 16:51:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 16:51:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5], ["budget_category_id", 6]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.2ms)


  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.2ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.5ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToBudgetCategories (20250819000435)
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL, "user_id" integer NOT NULL)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35mSQL (0.2ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type" FROM "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[31mROLLBACK TRANSACTION[0m
  [1m[36mActiveRecord::InternalMetadata Load (0.6ms)[0m  [1m[34mSELECT * FROM "ar_internal_metadata" WHERE "ar_internal_metadata"."key" = ? ORDER BY "ar_internal_metadata"."key" ASC LIMIT 1[0m  [[nil, "environment"]]
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Migrating to AddUserToBudgetCategories (20250819000435)
  [1m[36mTRANSACTION (0.0ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[35m (0.4ms)[0m  [1m[35mALTER TABLE "budget_categories" ADD "user_id" integer[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_user_id" ON "budget_categories" ("user_id")[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_user_id" ON "abudget_categories" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","name","amount","description","created_at","updated_at","category_type","user_id")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type","user_id" FROM "budget_categories"[0m
  [1m[35m (0.5ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL, "user_id" integer, CONSTRAINT "fk_rails_12c69c5f52"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_user_id" ON "budget_categories" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type","user_id")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type","user_id" FROM "abudget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mUser Exists? (0.1ms)[0m  [1m[34mSELECT 1 AS one FROM "users" LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" ORDER BY "users"."id" ASC LIMIT ?[0m  [["LIMIT", 1]]
  [1m[36mBudgetCategory Update All (0.1ms)[0m  [1m[33mUPDATE "budget_categories" SET "user_id" = ? WHERE "budget_categories"."user_id" IS NULL[0m  [["user_id", 1]]
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA foreign_keys[0m
  [1m[35mSQL (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = ON[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = OFF[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE TEMPORARY TABLE "abudget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL, "user_id" integer)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_user_id" ON "abudget_categories" ("user_id")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "tindex_abudget_categories_on_category_type" ON "abudget_categories" ("category_type")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "abudget_categories" ("id","name","amount","description","created_at","updated_at","category_type","user_id")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type","user_id" FROM "budget_categories"[0m
  [1m[35m (0.1ms)[0m  [1m[35mDROP TABLE "budget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mCREATE TABLE "budget_categories" ("id" integer PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar, "amount" decimal, "description" text, "created_at" datetime(6) NOT NULL, "updated_at" datetime(6) NOT NULL, "category_type" varchar DEFAULT 'variable_expense' NOT NULL, "user_id" integer NOT NULL, CONSTRAINT "fk_rails_12c69c5f52"
FOREIGN KEY ("user_id")
  REFERENCES "users" ("id")
)[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_category_type" ON "budget_categories" ("category_type")[0m
  [1m[35m (0.1ms)[0m  [1m[35mCREATE INDEX "index_budget_categories_on_user_id" ON "budget_categories" ("user_id")[0m
  [1m[35mSQL (0.1ms)[0m  [1m[32mINSERT INTO "budget_categories" ("id","name","amount","description","created_at","updated_at","category_type","user_id")
                     SELECT "id","name","amount","description","created_at","updated_at","category_type","user_id" FROM "abudget_categories"[0m
  [1m[35m (0.2ms)[0m  [1m[35mDROP TABLE "abudget_categories"[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA defer_foreign_keys = 0[0m
  [1m[35m (0.0ms)[0m  [1m[35mPRAGMA foreign_keys = 1[0m
  [1m[36mActiveRecord::SchemaMigration Create (0.1ms)[0m  [1m[32mINSERT INTO "schema_migrations" ("version") VALUES ('20250819000435') RETURNING "version"[0m
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1m[34mSELECT "schema_migrations"."version" FROM "schema_migrations" ORDER BY "schema_migrations"."version" ASC[0m
Started GET "/auth/csrf" for ::1 at 2025-08-18 17:09:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:09:36 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:09:36 -0700
Processing by AuthController#me as */*
Processing by CsrfController#show as */*
  [1m[36mUser Load (31.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Completed 200 OK in 51ms (Views: 0.2ms | ActiveRecord: 31.3ms (1 query, 0 cached) | GC: 1.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:09:36 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:09:36 -0700
Processing by AuthController#me as */*
  [1m[36mUser Load (0.3ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.3ms (1 query, 0 cached) | GC: 0.0ms)


Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:09:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.2ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.4ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.6ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 96ms (Views: 0.4ms | ActiveRecord: 2.3ms (10 queries, 1 cached) | GC: 3.3ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:09:38 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:09:38 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5], ["budget_category_id", 6]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.3ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:09:43 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:09:43 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
undefined method `user' for #<BudgetCategory id: 5, name: "Gas", amount: 0.2e3, description: "Gas for all vehicles", created_at: "2025-08-18 23:43:50.515338000 +0000", updated_at: "2025-08-18 23:43:50.515338000 +0000", category_type: "variable_expense", user_id: 1>
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_methods.rb:512:in `method_missing'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_methods.rb:495:in `method_missing'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/delete_budget_category.rb:12:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 5ms (Views: 0.2ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.0ms)


  [1m[36mBudgetCategory Load (4.5ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" /* loading for pp */ LIMIT ?[0m  [["LIMIT", 11]]
Started GET "/auth/csrf" for ::1 at 2025-08-18 17:10:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 17ms (Views: 0.7ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:10:36 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:10:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 37ms (Views: 0.1ms | ActiveRecord: 5.9ms (1 query, 0 cached) | GC: 3.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:10:36 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:10:36 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 2ms (Views: 0.1ms | ActiveRecord: 0.1ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:10:36 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 252ms (Views: 0.3ms | ActiveRecord: 2.3ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:10:39 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:10:39 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5], ["budget_category_id", 6]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:10:42 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:10:42 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"6"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"6"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 6], ["LIMIT", 1]]
undefined method `user' for #<BudgetCategory id: 6, name: "Car Payment", amount: 0.12e3, description: nil, created_at: "2025-08-18 23:51:39.517611000 +0000", updated_at: "2025-08-18 23:51:39.517611000 +0000", category_type: "variable_expense", user_id: 1>
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activemodel-8.0.2/lib/active_model/attribute_methods.rb:512:in `method_missing'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/activerecord-8.0.2/lib/active_record/attribute_methods.rb:495:in `method_missing'
/Users/nate/code/budget-tracker/server/app/graphql/mutations/delete_budget_category.rb:12:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:118:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/mutation.rb:69:in `call_resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:105:in `block (3 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:93:in `block (2 levels) in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:84:in `block in resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/resolver.rb:72:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/has_single_input_argument.rb:36:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/relay_classic_mutation.rb:44:in `resolve_with_support'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `public_send'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:758:in `block (2 levels) in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:892:in `with_extensions'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:729:in `block in resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:871:in `minimal_after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/query.rb:28:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/field.rb:727:in `resolve'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:462:in `block (2 levels) in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/tracing/trace.rb:90:in `execute_field'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:461:in `block in evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:809:in `call_method_on_directives'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:449:in `evaluate_selection_with_resolved_keyword_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:427:in `block in evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:936:in `after_lazy'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:374:in `evaluate_selection_with_args'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/runtime.rb:368:in `block in evaluate_selection'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/execution/interpreter/arguments_cache.rb:46:in `block in dataload_for'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/schema/member/has_arguments.rb:272:in `block (3 levels) in coerce_arguments'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:300:in `block in spawn_job_fiber'
/Users/nate/.rbenv/versions/3.2.8/lib/ruby/gems/3.2.0/gems/graphql-2.5.11/lib/graphql/dataloader.rb:255:in `block in spawn_fiber'
Completed 500 Internal Server Error in 7ms (Views: 0.2ms | ActiveRecord: 0.2ms (2 queries, 0 cached) | GC: 0.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 15ms (Views: 0.7ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.9ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:16:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 52ms (Views: 0.1ms | ActiveRecord: 8.6ms (1 query, 0 cached) | GC: 3.1ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:05 -0700
Started GET "/auth/me" for ::1 at 2025-08-18 17:16:05 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Processing by AuthController#me as */*
  [1m[36mUser Load (0.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.2ms (1 query, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:16:05 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetAccounts", "variables"=>{}, "query"=>"query GetAccounts {\n  accounts {\n    id\n    name\n    accountType\n    startingBalance\n    currentBalance\n    totalSpendingOrPayments\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      occurredOn\n      memo\n      createdAt\n      updatedAt\n      budgetCategory {\n        id\n        name\n        categoryType\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mAccount Load (0.1ms)[0m  [1m[34mSELECT "accounts".* FROM "accounts" WHERE "accounts"."user_id" = ?[0m  [["user_id", 1]]
  [1m[36mTransaction Load (0.1ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."account_id" IN (?, ?, ?)[0m  [["account_id", 1], ["account_id", 2], ["account_id", 3]]
  [1m[36mBudgetCategory Load (0.2ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" IN (?, ?)[0m  [["id", 1], ["id", 2]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mCACHE Transaction Sum (0.0ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents < 0)[0m  [["account_id", 1]]
  [1m[36mTransaction Sum (0.2ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 2]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ?[0m  [["account_id", 3]]
  [1m[36mTransaction Sum (0.1ms)[0m  [1m[34mSELECT SUM("transactions"."amount_cents") FROM "transactions" WHERE "transactions"."account_id" = ? AND (amount_cents > 0)[0m  [["account_id", 3]]
Completed 200 OK in 239ms (Views: 0.2ms | ActiveRecord: 2.1ms (10 queries, 1 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:07 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:16:07 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5], ["budget_category_id", 6]]
Completed 200 OK in 10ms (Views: 1.4ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.0ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:16:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"6"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"6"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 6], ["LIMIT", 1]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Load (0.5ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 6]]
  [1m[36mBudgetCategory Destroy (0.1ms)[0m  [1m[31mDELETE FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 6]]
  [1m[36mTRANSACTION (0.6ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 12ms (Views: 0.1ms | ActiveRecord: 1.6ms (5 queries, 1 cached) | GC: 1.7ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:16:11 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:16:11 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4], ["budget_category_id", 5]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:23:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:23:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"DeleteBudgetCategory", "variables"=>{"id"=>"5"}, "query"=>"mutation DeleteBudgetCategory($id: ID!) {\n  deleteBudgetCategory(input: {id: $id}) {\n    success\n    errors\n    __typename\n  }\n}"}}
  [1m[36mUser Load (1.2ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories" WHERE "budget_categories"."id" = ? LIMIT ?[0m  [["id", 5], ["LIMIT", 1]]
  [1m[36mCACHE User Load (0.0ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mTRANSACTION (0.1ms)[0m  [1m[36mBEGIN immediate TRANSACTION[0m
  [1m[36mTransaction Load (0.3ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" = ?[0m  [["budget_category_id", 5]]
  [1m[36mBudgetCategory Destroy (0.1ms)[0m  [1m[31mDELETE FROM "budget_categories" WHERE "budget_categories"."id" = ?[0m  [["id", 5]]
  [1m[36mTRANSACTION (0.4ms)[0m  [1m[36mCOMMIT TRANSACTION[0m
Completed 200 OK in 8ms (Views: 0.1ms | ActiveRecord: 2.2ms (5 queries, 1 cached) | GC: 0.4ms)


Started GET "/auth/csrf" for ::1 at 2025-08-18 17:23:34 -0700
Processing by CsrfController#show as */*
Completed 200 OK in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms (0 queries, 0 cached) | GC: 0.0ms)


Started POST "/graphql" for ::1 at 2025-08-18 17:23:34 -0700
Processing by GraphqlController#execute as */*
  Parameters: {"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}", "graphql"=>{"operationName"=>"GetBudgetCategories", "variables"=>{}, "query"=>"query GetBudgetCategories {\n  budgetCategories {\n    id\n    name\n    amount\n    description\n    categoryType\n    createdAt\n    updatedAt\n    transactions {\n      id\n      amount\n      memo\n      occurredOn\n      __typename\n    }\n    __typename\n  }\n}"}}
  [1m[36mUser Load (0.1ms)[0m  [1m[34mSELECT "users".* FROM "users" WHERE "users"."id" = ? LIMIT ?[0m  [["id", 1], ["LIMIT", 1]]
  [1m[36mBudgetCategory Load (0.1ms)[0m  [1m[34mSELECT "budget_categories".* FROM "budget_categories"[0m
  [1m[36mTransaction Load (0.2ms)[0m  [1m[34mSELECT "transactions".* FROM "transactions" WHERE "transactions"."budget_category_id" IN (?, ?, ?, ?)[0m  [["budget_category_id", 1], ["budget_category_id", 2], ["budget_category_id", 3], ["budget_category_id", 4]]
Completed 200 OK in 6ms (Views: 1.4ms | ActiveRecord: 0.4ms (3 queries, 0 cached) | GC: 1.1ms)


